[["Map",1,2,5,6],"meta::meta",["Map",3,4],"config-digest","0248ea146d727bd4","posts",["Map",7,8,38,39,54,55,82,83,99,100,114,115,128,129,155,156,169,170,184,185,199,200,214,215,238,239,253,254,268,269,283,284,298,299,313,314,328,329,352,353,379,380],"2023-02-05-on-the-way-home-from-jamstackconf-2022",{"id":7,"data":9,"body":16,"filePath":17,"digest":18,"rendered":19},{"title":10,"pubDate":11,"description":12,"featuredImage":13,"featuredImageAlt":14,"rssOnly":15,"draft":15},"On the way home from JamstackConf 2022",["Date","2022-11-11T17:00:51.000Z"],"Heading home from Jamstack Conf 2022, and trying to contain all I learned in one brain.","/assets/media/20221108_134222-copy.jpeg","Charlie Gerard giving a brilliant talk about (legally!) getting data from airplanes using radio waves and JavaScript.",false,"## My head is still reeling\n\nReeling, I say! - from two days of talks, discussions, and laughs while attending Netlify's [JamStackConf 2022](). I got to meet and say hi to a bunch of brilliant people like [Jo Franchetti](https://github.com/thisisjofrank), [Alex Trost](https://github.com/trostcodes), [Matt Biillman](https://twitter.com/biilmann), [Sara Viera](https://twitter.com/NikkitaFTW), [Ben Hong](https://twitter.com/bencodezen),  [Brian Douglas](https://twitter.com/bdougieyo), [Chris Bach](https://twitter.com/chr_bach), [Jem Young](https://twitter.com/JemYoung), and so, so many others! A few major themes could be seen across the whole of the conference:\n\n### Collaboration\n\nSo many new and neat tools are trying to solve creative problems not just for developers, but for the team members that work with developers. Content management tools that provide both strong DX and UX, visual design tools letting developers prototype logic where the layout design lives, database tools that let non-technical users manage stored procedures, and companies trying to use the Jamstack for the greater good.\n\n### Abstraction\n\nThose aforementioned tools exhibited the power of low-code/no-code tooling in today's ecosystem. In my discussions and in several talks and panels, speakers highlighted how using reliable services for concerns like authentication, payments, form submission, user registration, and more paid more dividends than just \"building it ourselves.\"\n\n### Access\n\nAs more and more users connect to the Internet, the advent of serverless technologies is allowing for more of the application stack these users see to not just exist on someone else's metal, but closer to the user by putting it \"on the edge.\" Effectively this means hosting as many copies of an application as possible as close as possible to the user, leveraging distributed servers to make responses to their browser and app requests faster. We've successfully managed this with storage, as well as app logic by way of edge functions. The next step of this movement is now moving data to the edge, and finding ways to reliably provide accurate copies of databases and changes made to them to users around the globe as quickly as possible.\n\nI plan on writing a blog post in the coming days to further discuss what all happened and some personal thoughts, but the future really is bright for the Jamstack. I'm here for it!","src/data/posts/2023-02-05-on-the-way-home-from-jamstackconf-2022.md","ae9d52cee2857abc",{"html":20,"metadata":21},"\u003Ch2 id=\"my-head-is-still-reeling\">My head is still reeling\u003C/h2>\n\u003Cp>Reeling, I say! - from two days of talks, discussions, and laughs while attending Netlify’s \u003Ca href=\"\">JamStackConf 2022\u003C/a>. I got to meet and say hi to a bunch of brilliant people like \u003Ca href=\"https://github.com/thisisjofrank\">Jo Franchetti\u003C/a>, \u003Ca href=\"https://github.com/trostcodes\">Alex Trost\u003C/a>, \u003Ca href=\"https://twitter.com/biilmann\">Matt Biillman\u003C/a>, \u003Ca href=\"https://twitter.com/NikkitaFTW\">Sara Viera\u003C/a>, \u003Ca href=\"https://twitter.com/bencodezen\">Ben Hong\u003C/a>,  \u003Ca href=\"https://twitter.com/bdougieyo\">Brian Douglas\u003C/a>, \u003Ca href=\"https://twitter.com/chr_bach\">Chris Bach\u003C/a>, \u003Ca href=\"https://twitter.com/JemYoung\">Jem Young\u003C/a>, and so, so many others! A few major themes could be seen across the whole of the conference:\u003C/p>\n\u003Ch3 id=\"collaboration\">Collaboration\u003C/h3>\n\u003Cp>So many new and neat tools are trying to solve creative problems not just for developers, but for the team members that work with developers. Content management tools that provide both strong DX and UX, visual design tools letting developers prototype logic where the layout design lives, database tools that let non-technical users manage stored procedures, and companies trying to use the Jamstack for the greater good.\u003C/p>\n\u003Ch3 id=\"abstraction\">Abstraction\u003C/h3>\n\u003Cp>Those aforementioned tools exhibited the power of low-code/no-code tooling in today’s ecosystem. In my discussions and in several talks and panels, speakers highlighted how using reliable services for concerns like authentication, payments, form submission, user registration, and more paid more dividends than just “building it ourselves.”\u003C/p>\n\u003Ch3 id=\"access\">Access\u003C/h3>\n\u003Cp>As more and more users connect to the Internet, the advent of serverless technologies is allowing for more of the application stack these users see to not just exist on someone else’s metal, but closer to the user by putting it “on the edge.” Effectively this means hosting as many copies of an application as possible as close as possible to the user, leveraging distributed servers to make responses to their browser and app requests faster. We’ve successfully managed this with storage, as well as app logic by way of edge functions. The next step of this movement is now moving data to the edge, and finding ways to reliably provide accurate copies of databases and changes made to them to users around the globe as quickly as possible.\u003C/p>\n\u003Cp>I plan on writing a blog post in the coming days to further discuss what all happened and some personal thoughts, but the future really is bright for the Jamstack. I’m here for it!\u003C/p>",{"headings":22,"imagePaths":37,"frontmatter":9},[23,27,31,34],{"depth":24,"slug":25,"text":26},2,"my-head-is-still-reeling","My head is still reeling",{"depth":28,"slug":29,"text":30},3,"collaboration","Collaboration",{"depth":28,"slug":32,"text":33},"abstraction","Abstraction",{"depth":28,"slug":35,"text":36},"access","Access",[],"2023-02-05-keeping-a-record",{"id":38,"data":40,"body":46,"filePath":47,"digest":48,"rendered":49},{"title":41,"pubDate":42,"description":43,"featuredImage":44,"featuredImageAlt":45,"rssOnly":15,"draft":15},"Keeping a record",["Date","2023-01-19T17:00:28.000Z"],"On the practice of recording your career","/assets/media/79681901-80b6-4f5b-8a29-2b84cd8d75b1_anigif_sub-buzz-3720-1499712431-1-1-.gif","Donald Glover giving his opinion about your blogging habits.","When I started learning web dev, I had built a portfolio and blog. The work featured mainly websites for loved ones or agency work and a few odd posts. It made it way easier to get eyes on my resume.\n\nHowever, after VueConf.US in 2019, I lost the practice of maintaining it. I had decided to rebuild my portfolio using Gridsome. Somewhere between _npm install gridsome_ and life, I hit a road block. My portfolio sat in an \"under construction\" state for ages.\n\nMy career progressed forward without it, nonetheless. It wasn't that I didn't need one, just that I had established some experience and that was enough to get me hired. Now I'm a senior engineer, and it could be said I got here despite not having a well-maintained portfolio or website.\n\nExcept I don't have anything concrete to look back on except for a one-page resume.\n\nThe practice of writing isn't for everyone, but I would advocate that maintaining some record of your career is a healthy practice to pick up. That could take the form of maintaining a series of side projects, blogging, or even just journaling in private. It helps build a detailed history and breadcrumb trail of your career you can look back at to help remind you of what you learned and when, of the reasons behind choices made, of what you want to avoid moving forward. It's part of the reason why I'm working on this site, to revive that practice for myself, taking the [advice](https://chriscoyier.net/2023/01/05/i-feel-contractually-obliged-to-link-to-a-post-like-bring-back-personal-blogging/) of prolific blogger Chris Coyier.\n\nIt's harder for me now, being a senior engineer and a family man, to find the time to write detailed, technical long-form pieces or long-living libraries. But I still think the practice is worth it, and I know that it will only become easier with repetition. I will never not advocate that developers at all points in their career consider keeping a record of their career, be it as a blog, diary, notes, or heck, even bullet journaling. Just build yourself a history, and preferably on a platform where your data is yours to keep.","src/data/posts/2023-02-05-keeping-a-record.md","9328b633dd8c215b",{"html":50,"metadata":51},"\u003Cp>When I started learning web dev, I had built a portfolio and blog. The work featured mainly websites for loved ones or agency work and a few odd posts. It made it way easier to get eyes on my resume.\u003C/p>\n\u003Cp>However, after VueConf.US in 2019, I lost the practice of maintaining it. I had decided to rebuild my portfolio using Gridsome. Somewhere between \u003Cem>npm install gridsome\u003C/em> and life, I hit a road block. My portfolio sat in an “under construction” state for ages.\u003C/p>\n\u003Cp>My career progressed forward without it, nonetheless. It wasn’t that I didn’t need one, just that I had established some experience and that was enough to get me hired. Now I’m a senior engineer, and it could be said I got here despite not having a well-maintained portfolio or website.\u003C/p>\n\u003Cp>Except I don’t have anything concrete to look back on except for a one-page resume.\u003C/p>\n\u003Cp>The practice of writing isn’t for everyone, but I would advocate that maintaining some record of your career is a healthy practice to pick up. That could take the form of maintaining a series of side projects, blogging, or even just journaling in private. It helps build a detailed history and breadcrumb trail of your career you can look back at to help remind you of what you learned and when, of the reasons behind choices made, of what you want to avoid moving forward. It’s part of the reason why I’m working on this site, to revive that practice for myself, taking the \u003Ca href=\"https://chriscoyier.net/2023/01/05/i-feel-contractually-obliged-to-link-to-a-post-like-bring-back-personal-blogging/\">advice\u003C/a> of prolific blogger Chris Coyier.\u003C/p>\n\u003Cp>It’s harder for me now, being a senior engineer and a family man, to find the time to write detailed, technical long-form pieces or long-living libraries. But I still think the practice is worth it, and I know that it will only become easier with repetition. I will never not advocate that developers at all points in their career consider keeping a record of their career, be it as a blog, diary, notes, or heck, even bullet journaling. Just build yourself a history, and preferably on a platform where your data is yours to keep.\u003C/p>",{"headings":52,"imagePaths":53,"frontmatter":40},[],[],"2023-02-05-jamstack-conf-2022-one-devs-recap",{"id":54,"data":56,"body":62,"filePath":63,"digest":64,"rendered":65},{"title":57,"pubDate":58,"description":59,"featuredImage":60,"featuredImageAlt":61,"rssOnly":15,"draft":15},"Jamstack Conf 2022 - One Dev's Recap",["Date","2022-11-29T17:00:33.000Z"],"One developer's recap of Netlify's Jamstack Conf 2022. It's me. I'm the developer.","/assets/media/a873caca-b355-4e47-8d24-b3ec2c350879_20221108_162354.jpeg","Phil Hawksworth getting the crowd ready for the next speaker at Jamstack Conf 2022","It's already been almost a month since Netlify's 2022 Jamstack Conf. In that time, I've been trying to get my thoughts of this year's event for all things \"Jamstack\" on paper.\n\nThe short version of those thoughts: the Jamstack has not changed much at all. Its concepts and practices are pretty well documented at this point, if not by [the company that coined the term in 2015](https://sdtimes.com/webdev/jamstack-brings-front-end-development-back-into-focus/), then by the robust community and ecosystem backing it.\n\nWhat has changed are the problems and challenges the Jamstack community is trying to solve today. In years past, the big question was, \"How do developers get a website stood up faster and less painfully without maintaining a server?\" That question has been answered by now. All kinds of solutions are offered by the likes of [Vercel](https://vercel.com/), [AWS](https://aws.amazon.com/amplify/), [Cloudflare](https://pages.cloudflare.com/), [Github](https://pages.github.com/), and [Netlify](https://www.netlify.com/) itself. And that's great, but as with anything that needs to scale, it seems answering that one question has uncovered more.\n\n- \"How do we keep this ecosystem healthy?\"\n- \"How do we help non-technical people contribute?\"\n- \"How do we get our content to users faster?\"\n\nIn my mini-recap of Jamstack Conf, I mentioned a few themes strung across the whole conference: **collaboration**, **abstraction**, and **access**. This post will aim to elaborate a bit on what I saw of those themes.\n\nRecordings of the talk are starting to make their way onto [the @JamstackConf YouTube channel](https://www.youtube.com/@JamstackConf), so I'll add links to the ones I mention here as they're made available. Until then, I'll try and do the general vibe of the conference and Phil Hawksworth's hosting justice.\n\n## Abstraction (or \"How Third-Party Tools Help Take the Pain Away\")\n\nAs Bud Abbott once said, \"Now wouldn't this be a fine [baseball] team without a pitcher?\" Well, wouldn't the Jamstack be a fine architecture without abstractions? Every year, Jamstack Conf highlights what abstractions can do for developers. This year was no different, with presentations covering libraries, frameworks, and as-a-Service... services.\n\nSome talks felt like seeing the sentiments of Chris Coyier's [2018](https://www.youtube.com/watch?v=grSxHfGoaeg) and [2019](https://www.youtube.com/watch?v=lFOfQsi5ye0) Jamstack Conf talks become manifest. Amy Dutton of the [COMPRESSEDfm](https://compressed.fm/) podcast talked about how she and her co-host, James Q. Quick, [built all kinds of nifty features and tooling](https://www.youtube.com/watch?v=WrqoANCpA7w) into their podcast's website leveraging Jamstack tools. Phil chatted with Aaron Emery and Kady Wood about [how TripActions bet on the Jamstack](https://www.youtube.com/watch?v=AsycaWgpmys) to move their monolithic marketing project towards more nimble tooling.\n\nOther presentations highlighted the many challenges teams can face on various technical levels and offered innovative solutions. The abstractions available to developers today are bonkers compared to where we were a few years ago. Content managements systems were of course well represented, but the Jamstack has clearly grown much further than that. Services on display covered problem areas including database management and orchestration, websockets, eCommerce, collaborative design, and monorepo build systems. A few that caught my eye in particular:\n\n- [Clutch](https://clutch.io/), providing visual tools that allow designers to work on a canvas while allowing devs to use code for prototyping.\n- [Ably](https://ably.com/), aiming to simplify the development and management of websockets and realtime communication\n- [TanStack Router](https://tanstack.com/router/v1), which offers framework-agnostic, type-safe routing and serialized state management\n- [Qwik](https://qwik.builder.io/), a new front-end framework that focuses on resumability instead of hydration to send as little JavaScript as possible with amazingly fast time-to-interactive.\n\n## Collaboroation (or \"Why Can't We Be Friends?\")\n\nMany of the services I mentioned offered features that let non-technical people contribute in technical ways. More crucially, though, a few of the presentations stressed the importance of **how** we enable others to contribute. Sanity's [Knut Melvær](https://twitter.com/@kmelve) drove home why caring about the content creator is important, and how Markdown isn't helping. OSS organizations and maintainers discussed how they're welcoming the cross-pollination of ideas more in recent years. Personally, Iooking at the open-source space today, I think it shows!\n\nOne panel of independent framework developers discussed [the importance of working together and inspiring each other's work on community-driven tools](https://www.youtube.com/watch?v=bPTZmUR7z90) instead of dogmatically black-boxing ideas. Another panel, this time of database experts, highlighted [the concerns of scaling database management today](https://www.youtube.com/watch?v=yIoFpfr4vA0) . Yet another discussed the problems of building runtimes and logic closer and closer to the edge.\n\nThe overarching sense I came away with was that many people in tech are all trying to solve similar problems. So why make it difficult for others to help solve them? Why fight over what the \"silver bullet\" answer to every edge case might be? These kinds of open conversations are encouraging and healthy for the community. They show that, despite competition, there's collaboration and stewardship involved in finding the solutions.\n\n## Access (or \"How I Learned to Stop Worrying and Embrace the Edge\")\n\nIt felt like almost every talk acknowledged the potential of leveraging \"the Edge.\" So much so that I effectively learned more about what that phrase meant at Jamstack Conf than anywhere else. And that's coming from someone who currently works at a cloud service provider!\n\nCloudflare's Obinna Ekwuno and Netlify's Erica Pisani gave great talks that helped define what the Edge is to developers and users. Erica taught us about the [benefits of leveraging edge functions](https://www.youtube.com/watch?v=Bg_lPsOhfuc), while Obinna dicussed the [challenges of deploying databases closer to the user](https://www.youtube.com/watch?v=SxGDut4or8A). Obinna's points and concerns were also echoed in the databases panel I mentioned earlier, particularly in figuring out how to abstract the database away from developers while maintaining up-to-date state close to the user.\n\nThe real highlight for me around this topic was the edge runtimes panel. Despite copious amounts of notes, I feel like I need to watch it a couple more times to get everything! It serves as a pretty good study of what the Edge represents and where it's going. Much of the conversation reminded me of the \"next billion users\" concern that became popular a while back. As access to the Internet becomes increasingly common worldwide, how do you give users the same responsive experience whether they have high or low connection speeds? As more developers start building applications at scale, what are the acceptable tradeoffs to keep data healthy and in sync?\n\n## So, so much more and so little time.\n\n![Charlie Gerard teaching us how to collect data from planes flying overhead with WebUSB and Jamstack tools (legally!)](/assets/media/08e139e8-646b-40b2-9d55-e63a182b2194_20221108_134209-1-copy.jpg)\n\nI'm missing a lot here. It's really hard to bottle my experience at this conference and confidently say I'm doing Phil justice here. Everything I've touched on doesn't even cover the \"hallway track.\" When I missed talks, I was having fascinating conversations with vendors at their booths, with folks about their thoughts on challenges I'm trying to solve, or even just in passing. Nevertheless, it was nothing short of a fantastic experience.\n\nI'd like to shout out to everyone who made my time at Jamstack Conf 2022 such a delight! Thank yous again to [Jo Franchetti](https://twitter.com/thisisjofrank), [Alex Trost](https://twitter.com/trostcodes), [Matt Biilmann](https://twitter.com/biilmann), [Sara Viera](https://twitter.com/NikitaFTW), [Ben Hong](https://twitter.com/bencodezen),  [Brian Douglas](https://twitter.com/bdougieyo), [Chris Bach](https://twitter.com/chr_bach), and [Jem Young](https://twitter.com/jemyoung), as well as to [Caleb Jasik](https://twitter.com/calebjasik), [Misko Hevery](https://twitter.com/mhevery), [Dana Lawson](https://www.linkedin.com/in/dglawson/), [Zach Leatherman](https://twitter.com/zachleat/), [Phil Hawksworth](https://twitter.com/philhawksworth), [Jason Lengstorf](https://twitter.com/jlengstorf), [Monica Sarbu](https://twitter.com/monicasarbu), and anyone else I may have forgotten! I know everyone here is just a regular person, but it'd be a lie to say I wasn't a bit starstruck.\n\nOne more thing: if you managed to make it to the end of this recap and you yourself have not attended a conference, I implore that you make attending one a goal. Even if it's a small one without a ton of coverage or big names, I encourage you find out where one is, whether their code of conduct is up to snuff, and if it is and you're up to it, try and attend. Network with people, speak about what you're concerned about, and add your voice to the conversation. The ecosystem needs it, and you'll be all the better for the experience later.","src/data/posts/2023-02-05-jamstack-conf-2022-one-devs-recap.md","02d6f24f1c017d78",{"html":66,"metadata":67},"\u003Cp>It’s already been almost a month since Netlify’s 2022 Jamstack Conf. In that time, I’ve been trying to get my thoughts of this year’s event for all things “Jamstack” on paper.\u003C/p>\n\u003Cp>The short version of those thoughts: the Jamstack has not changed much at all. Its concepts and practices are pretty well documented at this point, if not by \u003Ca href=\"https://sdtimes.com/webdev/jamstack-brings-front-end-development-back-into-focus/\">the company that coined the term in 2015\u003C/a>, then by the robust community and ecosystem backing it.\u003C/p>\n\u003Cp>What has changed are the problems and challenges the Jamstack community is trying to solve today. In years past, the big question was, “How do developers get a website stood up faster and less painfully without maintaining a server?” That question has been answered by now. All kinds of solutions are offered by the likes of \u003Ca href=\"https://vercel.com/\">Vercel\u003C/a>, \u003Ca href=\"https://aws.amazon.com/amplify/\">AWS\u003C/a>, \u003Ca href=\"https://pages.cloudflare.com/\">Cloudflare\u003C/a>, \u003Ca href=\"https://pages.github.com/\">Github\u003C/a>, and \u003Ca href=\"https://www.netlify.com/\">Netlify\u003C/a> itself. And that’s great, but as with anything that needs to scale, it seems answering that one question has uncovered more.\u003C/p>\n\u003Cul>\n\u003Cli>“How do we keep this ecosystem healthy?”\u003C/li>\n\u003Cli>“How do we help non-technical people contribute?”\u003C/li>\n\u003Cli>“How do we get our content to users faster?”\u003C/li>\n\u003C/ul>\n\u003Cp>In my mini-recap of Jamstack Conf, I mentioned a few themes strung across the whole conference: \u003Cstrong>collaboration\u003C/strong>, \u003Cstrong>abstraction\u003C/strong>, and \u003Cstrong>access\u003C/strong>. This post will aim to elaborate a bit on what I saw of those themes.\u003C/p>\n\u003Cp>Recordings of the talk are starting to make their way onto \u003Ca href=\"https://www.youtube.com/@JamstackConf\">the @JamstackConf YouTube channel\u003C/a>, so I’ll add links to the ones I mention here as they’re made available. Until then, I’ll try and do the general vibe of the conference and Phil Hawksworth’s hosting justice.\u003C/p>\n\u003Ch2 id=\"abstraction-or-how-third-party-tools-help-take-the-pain-away\">Abstraction (or “How Third-Party Tools Help Take the Pain Away”)\u003C/h2>\n\u003Cp>As Bud Abbott once said, “Now wouldn’t this be a fine [baseball] team without a pitcher?” Well, wouldn’t the Jamstack be a fine architecture without abstractions? Every year, Jamstack Conf highlights what abstractions can do for developers. This year was no different, with presentations covering libraries, frameworks, and as-a-Service… services.\u003C/p>\n\u003Cp>Some talks felt like seeing the sentiments of Chris Coyier’s \u003Ca href=\"https://www.youtube.com/watch?v=grSxHfGoaeg\">2018\u003C/a> and \u003Ca href=\"https://www.youtube.com/watch?v=lFOfQsi5ye0\">2019\u003C/a> Jamstack Conf talks become manifest. Amy Dutton of the \u003Ca href=\"https://compressed.fm/\">COMPRESSEDfm\u003C/a> podcast talked about how she and her co-host, James Q. Quick, \u003Ca href=\"https://www.youtube.com/watch?v=WrqoANCpA7w\">built all kinds of nifty features and tooling\u003C/a> into their podcast’s website leveraging Jamstack tools. Phil chatted with Aaron Emery and Kady Wood about \u003Ca href=\"https://www.youtube.com/watch?v=AsycaWgpmys\">how TripActions bet on the Jamstack\u003C/a> to move their monolithic marketing project towards more nimble tooling.\u003C/p>\n\u003Cp>Other presentations highlighted the many challenges teams can face on various technical levels and offered innovative solutions. The abstractions available to developers today are bonkers compared to where we were a few years ago. Content managements systems were of course well represented, but the Jamstack has clearly grown much further than that. Services on display covered problem areas including database management and orchestration, websockets, eCommerce, collaborative design, and monorepo build systems. A few that caught my eye in particular:\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://clutch.io/\">Clutch\u003C/a>, providing visual tools that allow designers to work on a canvas while allowing devs to use code for prototyping.\u003C/li>\n\u003Cli>\u003Ca href=\"https://ably.com/\">Ably\u003C/a>, aiming to simplify the development and management of websockets and realtime communication\u003C/li>\n\u003Cli>\u003Ca href=\"https://tanstack.com/router/v1\">TanStack Router\u003C/a>, which offers framework-agnostic, type-safe routing and serialized state management\u003C/li>\n\u003Cli>\u003Ca href=\"https://qwik.builder.io/\">Qwik\u003C/a>, a new front-end framework that focuses on resumability instead of hydration to send as little JavaScript as possible with amazingly fast time-to-interactive.\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"collaboroation-or-why-cant-we-be-friends\">Collaboroation (or “Why Can’t We Be Friends?”)\u003C/h2>\n\u003Cp>Many of the services I mentioned offered features that let non-technical people contribute in technical ways. More crucially, though, a few of the presentations stressed the importance of \u003Cstrong>how\u003C/strong> we enable others to contribute. Sanity’s \u003Ca href=\"https://twitter.com/@kmelve\">Knut Melvær\u003C/a> drove home why caring about the content creator is important, and how Markdown isn’t helping. OSS organizations and maintainers discussed how they’re welcoming the cross-pollination of ideas more in recent years. Personally, Iooking at the open-source space today, I think it shows!\u003C/p>\n\u003Cp>One panel of independent framework developers discussed \u003Ca href=\"https://www.youtube.com/watch?v=bPTZmUR7z90\">the importance of working together and inspiring each other’s work on community-driven tools\u003C/a> instead of dogmatically black-boxing ideas. Another panel, this time of database experts, highlighted \u003Ca href=\"https://www.youtube.com/watch?v=yIoFpfr4vA0\">the concerns of scaling database management today\u003C/a> . Yet another discussed the problems of building runtimes and logic closer and closer to the edge.\u003C/p>\n\u003Cp>The overarching sense I came away with was that many people in tech are all trying to solve similar problems. So why make it difficult for others to help solve them? Why fight over what the “silver bullet” answer to every edge case might be? These kinds of open conversations are encouraging and healthy for the community. They show that, despite competition, there’s collaboration and stewardship involved in finding the solutions.\u003C/p>\n\u003Ch2 id=\"access-or-how-i-learned-to-stop-worrying-and-embrace-the-edge\">Access (or “How I Learned to Stop Worrying and Embrace the Edge”)\u003C/h2>\n\u003Cp>It felt like almost every talk acknowledged the potential of leveraging “the Edge.” So much so that I effectively learned more about what that phrase meant at Jamstack Conf than anywhere else. And that’s coming from someone who currently works at a cloud service provider!\u003C/p>\n\u003Cp>Cloudflare’s Obinna Ekwuno and Netlify’s Erica Pisani gave great talks that helped define what the Edge is to developers and users. Erica taught us about the \u003Ca href=\"https://www.youtube.com/watch?v=Bg_lPsOhfuc\">benefits of leveraging edge functions\u003C/a>, while Obinna dicussed the \u003Ca href=\"https://www.youtube.com/watch?v=SxGDut4or8A\">challenges of deploying databases closer to the user\u003C/a>. Obinna’s points and concerns were also echoed in the databases panel I mentioned earlier, particularly in figuring out how to abstract the database away from developers while maintaining up-to-date state close to the user.\u003C/p>\n\u003Cp>The real highlight for me around this topic was the edge runtimes panel. Despite copious amounts of notes, I feel like I need to watch it a couple more times to get everything! It serves as a pretty good study of what the Edge represents and where it’s going. Much of the conversation reminded me of the “next billion users” concern that became popular a while back. As access to the Internet becomes increasingly common worldwide, how do you give users the same responsive experience whether they have high or low connection speeds? As more developers start building applications at scale, what are the acceptable tradeoffs to keep data healthy and in sync?\u003C/p>\n\u003Ch2 id=\"so-so-much-more-and-so-little-time\">So, so much more and so little time.\u003C/h2>\n\u003Cp>\u003Cimg src=\"/assets/media/08e139e8-646b-40b2-9d55-e63a182b2194_20221108_134209-1-copy.jpg\" alt=\"Charlie Gerard teaching us how to collect data from planes flying overhead with WebUSB and Jamstack tools (legally!)\">\u003C/p>\n\u003Cp>I’m missing a lot here. It’s really hard to bottle my experience at this conference and confidently say I’m doing Phil justice here. Everything I’ve touched on doesn’t even cover the “hallway track.” When I missed talks, I was having fascinating conversations with vendors at their booths, with folks about their thoughts on challenges I’m trying to solve, or even just in passing. Nevertheless, it was nothing short of a fantastic experience.\u003C/p>\n\u003Cp>I’d like to shout out to everyone who made my time at Jamstack Conf 2022 such a delight! Thank yous again to \u003Ca href=\"https://twitter.com/thisisjofrank\">Jo Franchetti\u003C/a>, \u003Ca href=\"https://twitter.com/trostcodes\">Alex Trost\u003C/a>, \u003Ca href=\"https://twitter.com/biilmann\">Matt Biilmann\u003C/a>, \u003Ca href=\"https://twitter.com/NikitaFTW\">Sara Viera\u003C/a>, \u003Ca href=\"https://twitter.com/bencodezen\">Ben Hong\u003C/a>,  \u003Ca href=\"https://twitter.com/bdougieyo\">Brian Douglas\u003C/a>, \u003Ca href=\"https://twitter.com/chr_bach\">Chris Bach\u003C/a>, and \u003Ca href=\"https://twitter.com/jemyoung\">Jem Young\u003C/a>, as well as to \u003Ca href=\"https://twitter.com/calebjasik\">Caleb Jasik\u003C/a>, \u003Ca href=\"https://twitter.com/mhevery\">Misko Hevery\u003C/a>, \u003Ca href=\"https://www.linkedin.com/in/dglawson/\">Dana Lawson\u003C/a>, \u003Ca href=\"https://twitter.com/zachleat/\">Zach Leatherman\u003C/a>, \u003Ca href=\"https://twitter.com/philhawksworth\">Phil Hawksworth\u003C/a>, \u003Ca href=\"https://twitter.com/jlengstorf\">Jason Lengstorf\u003C/a>, \u003Ca href=\"https://twitter.com/monicasarbu\">Monica Sarbu\u003C/a>, and anyone else I may have forgotten! I know everyone here is just a regular person, but it’d be a lie to say I wasn’t a bit starstruck.\u003C/p>\n\u003Cp>One more thing: if you managed to make it to the end of this recap and you yourself have not attended a conference, I implore that you make attending one a goal. Even if it’s a small one without a ton of coverage or big names, I encourage you find out where one is, whether their code of conduct is up to snuff, and if it is and you’re up to it, try and attend. Network with people, speak about what you’re concerned about, and add your voice to the conversation. The ecosystem needs it, and you’ll be all the better for the experience later.\u003C/p>",{"headings":68,"imagePaths":81,"frontmatter":56},[69,72,75,78],{"depth":24,"slug":70,"text":71},"abstraction-or-how-third-party-tools-help-take-the-pain-away","Abstraction (or “How Third-Party Tools Help Take the Pain Away”)",{"depth":24,"slug":73,"text":74},"collaboroation-or-why-cant-we-be-friends","Collaboroation (or “Why Can’t We Be Friends?”)",{"depth":24,"slug":76,"text":77},"access-or-how-i-learned-to-stop-worrying-and-embrace-the-edge","Access (or “How I Learned to Stop Worrying and Embrace the Edge”)",{"depth":24,"slug":79,"text":80},"so-so-much-more-and-so-little-time","So, so much more and so little time.",[],"2023-09-21-we-need-to-talk-about-webops-so-we-can-stop-talking-about-webops",{"id":82,"data":84,"body":91,"filePath":92,"digest":93,"rendered":94},{"title":85,"pubDate":86,"description":87,"featuredImage":88,"featuredImageAlt":89,"rssOnly":15,"draft":90},"We need to talk about WebOps so we can stop talking about WebOps.",["Date","2023-09-21T13:40:54.251Z"],"It's a thing, but it needs to be more of a thing.","/assets/media/relaunching-blog.jpg","Placeholder",true,"In 2019 and 2020, entrepreneur, raconteur, and pretty solid coder Chris Coyier gave us a talk and an article that laid bare what a frontend developer has to deal. It's a real good evergreen piece that I highly recommend.\n\nFast forward to today, and not much has changed. We're still eyeballing new frameworks to see which will bump React. Webpack is still ubiquitous while a bunch of other build tools vye for eyeballs. JavaScript couldn't be more pervasive, while CSS and HTML feel like they've been tossed into the backseat. Accessibility is still largely considered a nice-to-have, which is unfortunate because it ultimately given the same prioritization as tech debt. We all know how that goes.","src/data/posts/2023-09-21-we-need-to-talk-about-webops-so-we-can-stop-talking-about-webops.md","89a650d131c55dd4",{"html":95,"metadata":96},"\u003Cp>In 2019 and 2020, entrepreneur, raconteur, and pretty solid coder Chris Coyier gave us a talk and an article that laid bare what a frontend developer has to deal. It’s a real good evergreen piece that I highly recommend.\u003C/p>\n\u003Cp>Fast forward to today, and not much has changed. We’re still eyeballing new frameworks to see which will bump React. Webpack is still ubiquitous while a bunch of other build tools vye for eyeballs. JavaScript couldn’t be more pervasive, while CSS and HTML feel like they’ve been tossed into the backseat. Accessibility is still largely considered a nice-to-have, which is unfortunate because it ultimately given the same prioritization as tech debt. We all know how that goes.\u003C/p>",{"headings":97,"imagePaths":98,"frontmatter":84},[],[],"2024-03-19-testing-for-us-and-not-us",{"id":99,"data":101,"body":106,"filePath":107,"digest":108,"rendered":109},{"title":102,"pubDate":103,"description":104,"featuredImage":105,"featuredImageAlt":105,"rssOnly":15,"draft":15},"Testing for 'U's and not 'u's",["Date","2024-03-19T03:44:08.786Z"],"In a world where code coverage rules with an iron fist, someone needs to standup for developer productivity.","","It's fifteen minutes ‘til the hour, what most people call “midnight”. Tonight, I'm calling that \"end of day.\"\n\nThat was when I said I'd have the new feature merged into the main branch of the repo. I was so confident that I'd have this working, ready to get into staging, by “end of day.” I had no doubt in my mind.\n\nLo, and there was a sullen cry, as if a million Github Actions and test runners rang out and said, \"No.\"\n\nI don't know what I was thinking. I should have remembered. I'd done this dance before. We, us engineers, we rallied against this hydra before. We asked for the time and resources to slay this multi-headed beast sucking up our flow state, this parallelized threat to our work-life balance. We finally got what we needed! And yet, at what cost?\n\nThis Minotaur we wrestle with on an hourly basis? Our monolithic - no, not monorepo, our monolithic front-end's testing suite. What was once a well-meant suite of tests and checks meant to gatekeep the release of bugs and broken features from production. Now, a massive amalgamation of integration and end-to-end tests, the culmination of years of copied and pasted testing patterns, rushed descriptions, and accepted Copilot suggestions. The spitting image of the [Testing Pyramid](https://martinfowler.com/articles/practical-test-pyramid.html) upturned.\n\nOn every pull request, the paralellized processing power of 30 machines must grind away at these tests to sate what could likely be done - nay, should be done! - by unit tests. Should even one fail, be it a test related or not to the pull request, it's a slow and arduous wait until the others finish before the the failed machine can be started again. And if it is related, may luck go with you that the task of correcting it and pushing a change not send you into a seemingly Sisyphean spiral as it has for me on this dark night.\n\nWhat pray tell is causing my tests to fail? Could it be another timeout as the test runner searches for an element that may or not be there? Could it be a change to a conditional that only now has finished trickling down with out proper vetting? Or is it another string expected to start with a capital “U” again in a phrase like 'Delete Users' . . . where all others are expected to be sentence-cased?\n\nBut alas! The bells of the test runner chime again for me! Another failure. I must tend to it, lest I be here another hour. Quickly. Flee. Flee from whence you came. Away from those tempting warmth of “80% test coverage!” I shall shield your escape while I return to my work . . .","src/data/posts/2024-03-19-testing-for-us-and-not-us.md","431f3c1c865c2837",{"html":110,"metadata":111},"\u003Cp>It’s fifteen minutes ‘til the hour, what most people call “midnight”. Tonight, I’m calling that “end of day.”\u003C/p>\n\u003Cp>That was when I said I’d have the new feature merged into the main branch of the repo. I was so confident that I’d have this working, ready to get into staging, by “end of day.” I had no doubt in my mind.\u003C/p>\n\u003Cp>Lo, and there was a sullen cry, as if a million Github Actions and test runners rang out and said, “No.”\u003C/p>\n\u003Cp>I don’t know what I was thinking. I should have remembered. I’d done this dance before. We, us engineers, we rallied against this hydra before. We asked for the time and resources to slay this multi-headed beast sucking up our flow state, this parallelized threat to our work-life balance. We finally got what we needed! And yet, at what cost?\u003C/p>\n\u003Cp>This Minotaur we wrestle with on an hourly basis? Our monolithic - no, not monorepo, our monolithic front-end’s testing suite. What was once a well-meant suite of tests and checks meant to gatekeep the release of bugs and broken features from production. Now, a massive amalgamation of integration and end-to-end tests, the culmination of years of copied and pasted testing patterns, rushed descriptions, and accepted Copilot suggestions. The spitting image of the \u003Ca href=\"https://martinfowler.com/articles/practical-test-pyramid.html\">Testing Pyramid\u003C/a> upturned.\u003C/p>\n\u003Cp>On every pull request, the paralellized processing power of 30 machines must grind away at these tests to sate what could likely be done - nay, should be done! - by unit tests. Should even one fail, be it a test related or not to the pull request, it’s a slow and arduous wait until the others finish before the the failed machine can be started again. And if it is related, may luck go with you that the task of correcting it and pushing a change not send you into a seemingly Sisyphean spiral as it has for me on this dark night.\u003C/p>\n\u003Cp>What pray tell is causing my tests to fail? Could it be another timeout as the test runner searches for an element that may or not be there? Could it be a change to a conditional that only now has finished trickling down with out proper vetting? Or is it another string expected to start with a capital “U” again in a phrase like ‘Delete Users’ … where all others are expected to be sentence-cased?\u003C/p>\n\u003Cp>But alas! The bells of the test runner chime again for me! Another failure. I must tend to it, lest I be here another hour. Quickly. Flee. Flee from whence you came. Away from those tempting warmth of “80% test coverage!” I shall shield your escape while I return to my work …\u003C/p>",{"headings":112,"imagePaths":113,"frontmatter":101},[],[],"2024-01-18-first-rule-of-open-source-contributions-dont-contribute",{"id":114,"data":116,"body":120,"filePath":121,"digest":122,"rendered":123},{"title":117,"pubDate":118,"description":119,"featuredImage":88,"featuredImageAlt":89,"rssOnly":15,"draft":90},"First rule of open-source contributions: don't contribute.",["Date","2024-01-18T13:37:46.457Z"],"Contributing to open-source isn't step one.","- Theo made a video about open-source\n- I agree, the video makes a point of how good intentions soured things for some people\n- Something the video doesn't provide is a positive look into what first contributions could look like\n- Want to show what my first contribution looked like\n- Outline a path to what an actual impactful contribution could be that doesn't annoy the maintainers","src/data/posts/2024-01-18-first-rule-of-open-source-contributions-dont-contribute.md","25bd24050a91279b",{"html":124,"metadata":125},"\u003Cul>\n\u003Cli>Theo made a video about open-source\u003C/li>\n\u003Cli>I agree, the video makes a point of how good intentions soured things for some people\u003C/li>\n\u003Cli>Something the video doesn’t provide is a positive look into what first contributions could look like\u003C/li>\n\u003Cli>Want to show what my first contribution looked like\u003C/li>\n\u003Cli>Outline a path to what an actual impactful contribution could be that doesn’t annoy the maintainers\u003C/li>\n\u003C/ul>",{"headings":126,"imagePaths":127,"frontmatter":116},[],[],"2024-01-08-2023-from-the-rearview-mirror",{"id":128,"data":130,"body":135,"filePath":136,"digest":137,"rendered":138},{"title":131,"pubDate":132,"description":133,"featuredImage":88,"featuredImageAlt":134,"rssOnly":15,"draft":15},"Post-to-post: 2023 from the rearview mirror",["Date","2024-01-30T23:43:56.000Z"],"2023 is officially so last year. Mine was fairly eventful. I forgot to write about it until now.","My desk, from which I published all of one post last year.","It's been over a year since my [last post](https://charlesvillard.co/blog/2023-02-05-keeping-a-record/), ironically enough. That post discussed the importance of writing regularly and declared that I would be doing so.\n\nThat didn't happen. I've drafted an idea or two, but I didn't get a single new post out. Whoops.\n\nThis wasn't because I had nothing to say. Much like many others, the habit of writing blog posts and building side projects is not one that ever came naturally to me. Day-to-day life is usually my reason d'jour, and mine is replete with work, children, family, chores, events, concerns, a limited amount of energy, and all kinds of other excuses.\n\nSo, in an effort to kickstart a change in that habit, I wanted to highlight a few things that I accomplished over the course of the last year as a senior member of a hybrid UI platform/infrastructure team. While I can't show off much code, I think this will give a peak into what front-end development can look like beyond the components and styling for which it's popularly known.\n\n## New dashboard, whose service?\n\nThe first project I tackled last year was leading the development of a redesigned dashboard for HPE GreenLake. This project is kind of special to me. With all its ups and downs, it was my first real test as a developer with the word “Senior” somewhere in their title.\n\nThe outline for this project seemed pretty straightforward: rebuild the dashboard to focus on the services each of our main applications offer instead of the applications themselves. Between myself and another engineer, we managed a proof-of-concept in record time. However, like many projects, what seemed like a \"simple reconfiguration\" of the UI turned into a far deeper rabbit hole. In one conversation, teammates involved in building the dashboard's previous version estimated our work would replace approximately 80% of the pre-existing monolithic front-end.\n\nThere were plenty of obstacles and red tape to get through, and challenges I won't get into details about here. Despite all of them, we completed our work in time for it to preview at HPE's annual Discover event, and that very work is now available to all of HPE's users. This work really taught me what it means to be a senior engineer by putting my feet to the fire. I came away from it with a better understanding of what senior- and staff-level individual contributors may need to navigate, what's worth documenting, what hills are worth fighting for, and much more.\n\n## \"DivOps?\" \"WebOps?\" Front-end build tooling\n\nNot long after I completed and handed off the dashboard build, I got the opportunity to work in a vageuly defined subsection of front-end development. Though I do like how Ben Ilegbodu defined it: [DivOps](https://www.benmvp.com/blog/what-divops-engineer/). A number of applications were being prepared for a new offering, and it necessiated an update to our micro-frontend architecture to ensure we could host applications not only in the cloud, but also on-premises. This meant divesting ourselves of libraries like single-spa-react and adjust to hosting applications as individual SPAs.\n\nUnfortunately, its work that won't make it into production. Such is the nature and whim of business. On the other hand, it got me getting comfortable with JavaScript build tools and their capabilities. It also got me working with a lot of teams and writing a lot of documentation, ultimately a lot of good practice. It also set the groundwork for a lot of really cool frontend architecture work our team will be taking on in the coming months.\n\n## Headers are hard. Who knew?\n\nAfter working on front-end build tools for a while, and after the decision to shelf my previous work, my responsibilties moved back towards UI, maintaining a new and improved global header. It's my primary focus these days, and a really interesting challenge. When we designed the v1 of this new header, we decided on building out a [web component-based header](https://developer.mozilla.org/en-US/docs/Web/API/Web_components) to allow applications built on any framework to consume it with a simple set of contracts to meet. This next year is going to involve a number of new integrations and features that I'm excited and anxious to build out.\n\n## What about now?\n\nNow that we're a month into the new year, I'm hoping to increase my output outside of work hours as well. I've [already streamed a bit](https://www.twitch.tv/cdvillard) and I'm hoping to write a bit more as well. We'll see what comes of this next year. All in, I'm seeing this as a blank slate opportunity to define my career moving forward. Hope you stick around to check it out.","src/data/posts/2024-01-08-2023-from-the-rearview-mirror.md","697d9bc2dc5c0805",{"html":139,"metadata":140},"\u003Cp>It’s been over a year since my \u003Ca href=\"https://charlesvillard.co/blog/2023-02-05-keeping-a-record/\">last post\u003C/a>, ironically enough. That post discussed the importance of writing regularly and declared that I would be doing so.\u003C/p>\n\u003Cp>That didn’t happen. I’ve drafted an idea or two, but I didn’t get a single new post out. Whoops.\u003C/p>\n\u003Cp>This wasn’t because I had nothing to say. Much like many others, the habit of writing blog posts and building side projects is not one that ever came naturally to me. Day-to-day life is usually my reason d’jour, and mine is replete with work, children, family, chores, events, concerns, a limited amount of energy, and all kinds of other excuses.\u003C/p>\n\u003Cp>So, in an effort to kickstart a change in that habit, I wanted to highlight a few things that I accomplished over the course of the last year as a senior member of a hybrid UI platform/infrastructure team. While I can’t show off much code, I think this will give a peak into what front-end development can look like beyond the components and styling for which it’s popularly known.\u003C/p>\n\u003Ch2 id=\"new-dashboard-whose-service\">New dashboard, whose service?\u003C/h2>\n\u003Cp>The first project I tackled last year was leading the development of a redesigned dashboard for HPE GreenLake. This project is kind of special to me. With all its ups and downs, it was my first real test as a developer with the word “Senior” somewhere in their title.\u003C/p>\n\u003Cp>The outline for this project seemed pretty straightforward: rebuild the dashboard to focus on the services each of our main applications offer instead of the applications themselves. Between myself and another engineer, we managed a proof-of-concept in record time. However, like many projects, what seemed like a “simple reconfiguration” of the UI turned into a far deeper rabbit hole. In one conversation, teammates involved in building the dashboard’s previous version estimated our work would replace approximately 80% of the pre-existing monolithic front-end.\u003C/p>\n\u003Cp>There were plenty of obstacles and red tape to get through, and challenges I won’t get into details about here. Despite all of them, we completed our work in time for it to preview at HPE’s annual Discover event, and that very work is now available to all of HPE’s users. This work really taught me what it means to be a senior engineer by putting my feet to the fire. I came away from it with a better understanding of what senior- and staff-level individual contributors may need to navigate, what’s worth documenting, what hills are worth fighting for, and much more.\u003C/p>\n\u003Ch2 id=\"divops-webops-front-end-build-tooling\">”DivOps?” “WebOps?” Front-end build tooling\u003C/h2>\n\u003Cp>Not long after I completed and handed off the dashboard build, I got the opportunity to work in a vageuly defined subsection of front-end development. Though I do like how Ben Ilegbodu defined it: \u003Ca href=\"https://www.benmvp.com/blog/what-divops-engineer/\">DivOps\u003C/a>. A number of applications were being prepared for a new offering, and it necessiated an update to our micro-frontend architecture to ensure we could host applications not only in the cloud, but also on-premises. This meant divesting ourselves of libraries like single-spa-react and adjust to hosting applications as individual SPAs.\u003C/p>\n\u003Cp>Unfortunately, its work that won’t make it into production. Such is the nature and whim of business. On the other hand, it got me getting comfortable with JavaScript build tools and their capabilities. It also got me working with a lot of teams and writing a lot of documentation, ultimately a lot of good practice. It also set the groundwork for a lot of really cool frontend architecture work our team will be taking on in the coming months.\u003C/p>\n\u003Ch2 id=\"headers-are-hard-who-knew\">Headers are hard. Who knew?\u003C/h2>\n\u003Cp>After working on front-end build tools for a while, and after the decision to shelf my previous work, my responsibilties moved back towards UI, maintaining a new and improved global header. It’s my primary focus these days, and a really interesting challenge. When we designed the v1 of this new header, we decided on building out a \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components\">web component-based header\u003C/a> to allow applications built on any framework to consume it with a simple set of contracts to meet. This next year is going to involve a number of new integrations and features that I’m excited and anxious to build out.\u003C/p>\n\u003Ch2 id=\"what-about-now\">What about now?\u003C/h2>\n\u003Cp>Now that we’re a month into the new year, I’m hoping to increase my output outside of work hours as well. I’ve \u003Ca href=\"https://www.twitch.tv/cdvillard\">already streamed a bit\u003C/a> and I’m hoping to write a bit more as well. We’ll see what comes of this next year. All in, I’m seeing this as a blank slate opportunity to define my career moving forward. Hope you stick around to check it out.\u003C/p>",{"headings":141,"imagePaths":154,"frontmatter":130},[142,145,148,151],{"depth":24,"slug":143,"text":144},"new-dashboard-whose-service","New dashboard, whose service?",{"depth":24,"slug":146,"text":147},"divops-webops-front-end-build-tooling","”DivOps?” “WebOps?” Front-end build tooling",{"depth":24,"slug":149,"text":150},"headers-are-hard-who-knew","Headers are hard. Who knew?",{"depth":24,"slug":152,"text":153},"what-about-now","What about now?",[],"2024-04-20-test",{"id":155,"data":157,"body":161,"filePath":162,"digest":163,"rendered":164},{"title":158,"pubDate":159,"updatedDate":160,"description":161,"rssOnly":15,"draft":90},"Test",["Date","2024-04-20T21:27:02.599Z"],["Date","2024-04-20T21:27:02.600Z"],"test","src/data/posts/2024-04-20-test.md","d513071e5f0bab3c",{"html":165,"metadata":166},"\u003Cp>test\u003C/p>",{"headings":167,"imagePaths":168,"frontmatter":157},[],[],"2024-04-17-in-the-defense-of-um",{"id":169,"data":171,"body":176,"filePath":177,"digest":178,"rendered":179},{"title":172,"pubDate":173,"updatedDate":174,"description":175,"rssOnly":15,"draft":90},"In the defense of \"Um\"",["Date","2024-04-17T14:24:40.670Z"],["Date","2024-06-30T04:00:00.000Z"],"Taking a beat === being in the moment?","* loved debate class\n* Was discouraged from heavy use of “like” or “um”\n* Especially in presentations which makes sense\n* Feels like it's bled into conversations in professional settings\n* Has bled over into social conversations as well\n* In hindsight, I kind of value those small moments as they let me clarify my thoughts whild holding my place.\n* A silent break might let someone jump in and I don't finish my thought, they might nto get context\n* Maybe this is representative of our era of social media and constant connectivity, especially post-pandemic in US\n* Before we had more moments of disconnectedness, even in times right before panedemic\n* People say more with their thoughts. Not so much anymore.","src/data/posts/2024-04-17-in-the-defense-of-um.md","a47f8a00d3af9bfd",{"html":180,"metadata":181},"\u003Cul>\n\u003Cli>loved debate class\u003C/li>\n\u003Cli>Was discouraged from heavy use of “like” or “um”\u003C/li>\n\u003Cli>Especially in presentations which makes sense\u003C/li>\n\u003Cli>Feels like it’s bled into conversations in professional settings\u003C/li>\n\u003Cli>Has bled over into social conversations as well\u003C/li>\n\u003Cli>In hindsight, I kind of value those small moments as they let me clarify my thoughts whild holding my place.\u003C/li>\n\u003Cli>A silent break might let someone jump in and I don’t finish my thought, they might nto get context\u003C/li>\n\u003Cli>Maybe this is representative of our era of social media and constant connectivity, especially post-pandemic in US\u003C/li>\n\u003Cli>Before we had more moments of disconnectedness, even in times right before panedemic\u003C/li>\n\u003Cli>People say more with their thoughts. Not so much anymore.\u003C/li>\n\u003C/ul>",{"headings":182,"imagePaths":183,"frontmatter":171},[],[],"2024-04-07-a-new-developer-biome-get-it",{"id":184,"data":186,"body":191,"filePath":192,"digest":193,"rendered":194},{"title":187,"pubDate":188,"updatedDate":189,"description":190,"featuredImage":105,"featuredImageAlt":105,"rssOnly":15,"draft":15},"Trying out a new developer Biome (get it?!)",["Date","2024-04-07T21:20:14.945Z"],["Date","2024-04-20T21:26:04.000Z"],"Developer experience is just as much about shedding bytes and time off the user experience as website performance is. Biome helps with that in a major way.","These days at work, I'm responsible for maintaining a new global common header. It's built with web components using [Microsoft FAST](https://www.fast.design/) elements and TypeScript, with ESLint for linting and formatting. The setup is pretty bog-standard, and really common these days. Visual Studio Code offers Intellisense for TypeScript and JavaScript out of the box, but adding ESLint for TypeScript requires adding a few other packages to your project. Which may not be the end of the world, but it does mean more dependencies to download and manage, which inherently chips away at the developer experience.\n\nAn alternative to ESLint I've started trying out is [Biome.js](https://www.biomejs.dev). The history behind this package is fascinating. Long story short, Biome is a fork of Rome Tools, a project promising an all-in-one JavaScript ecosystem that was unfortunately plagued with issues and eventually abandoned. Biome is still aims to provide that complete ecosystem with linting and formatting for many flavors of JavaScript built-in including TypeScript. This means no ESLint-specific dependencies and plugins just to have TypeScript in the environment.\n\nFor my particular project, implementing Biome meant replacing all of this…:\n\n```\n\n@typescript-eslint/eslint-plugin:    2.680MB\n@typescript-eslint/parser       :    0.018MB\neslint-plugin-headers           :    0.052MB\neslint-config-airbnb-base       :    0.094MB\neslint                          :    3.030MB\n____________________________________________\n\nTotal size of files             :    5.874MB\n\n```\n\n…with just this…:\n\n```\n\n@biomejs/biome                  :    0.130MB\n\n```\n\n…and effectively getting the same thing.\n\nAll of the packages I get to remove are just developer dependencies and won't directly affect the end user's experience, but the difference and benefits are still pretty significant. Considering the primary consumer of this packages are product teams looking to maintain consistent branding, this change means less code for them to download and install. It also means less surface areas for potential issues and threats, which translates to Dependabot having less to scan and fret over.\n\nI highly encourage developers working with ESLint to take a look. Your milage may vary, of course, and I'm still testing it before merging it into the project, but it's that much less to worry about installing every time.","src/data/posts/2024-04-07-a-new-developer-biome-get-it.md","c2e37189730c3ab0",{"html":195,"metadata":196},"\u003Cp>These days at work, I’m responsible for maintaining a new global common header. It’s built with web components using \u003Ca href=\"https://www.fast.design/\">Microsoft FAST\u003C/a> elements and TypeScript, with ESLint for linting and formatting. The setup is pretty bog-standard, and really common these days. Visual Studio Code offers Intellisense for TypeScript and JavaScript out of the box, but adding ESLint for TypeScript requires adding a few other packages to your project. Which may not be the end of the world, but it does mean more dependencies to download and manage, which inherently chips away at the developer experience.\u003C/p>\n\u003Cp>An alternative to ESLint I’ve started trying out is \u003Ca href=\"https://www.biomejs.dev\">Biome.js\u003C/a>. The history behind this package is fascinating. Long story short, Biome is a fork of Rome Tools, a project promising an all-in-one JavaScript ecosystem that was unfortunately plagued with issues and eventually abandoned. Biome is still aims to provide that complete ecosystem with linting and formatting for many flavors of JavaScript built-in including TypeScript. This means no ESLint-specific dependencies and plugins just to have TypeScript in the environment.\u003C/p>\n\u003Cp>For my particular project, implementing Biome meant replacing all of this…:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>@typescript-eslint/eslint-plugin:    2.680MB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>@typescript-eslint/parser       :    0.018MB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>eslint-plugin-headers           :    0.052MB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>eslint-config-airbnb-base       :    0.094MB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>eslint                          :    3.030MB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>____________________________________________\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>Total size of files             :    5.874MB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>…with just this…:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>@biomejs/biome                  :    0.130MB\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>…and effectively getting the same thing.\u003C/p>\n\u003Cp>All of the packages I get to remove are just developer dependencies and won’t directly affect the end user’s experience, but the difference and benefits are still pretty significant. Considering the primary consumer of this packages are product teams looking to maintain consistent branding, this change means less code for them to download and install. It also means less surface areas for potential issues and threats, which translates to Dependabot having less to scan and fret over.\u003C/p>\n\u003Cp>I highly encourage developers working with ESLint to take a look. Your milage may vary, of course, and I’m still testing it before merging it into the project, but it’s that much less to worry about installing every time.\u003C/p>",{"headings":197,"imagePaths":198,"frontmatter":186},[],[],"2024-04-29-fedc-recap",{"id":199,"data":201,"body":206,"filePath":207,"digest":208,"rendered":209},{"title":202,"pubDate":203,"updatedDate":204,"description":205,"rssOnly":15,"draft":90},"Finally getting to sit with my FEDC notes",["Date","2024-06-06T04:00:00.000Z"],["Date","2024-06-07T03:26:59.494Z"],"Front End Design Conference is SO back!","* Went to Front End Design Conference\n* Experienced amazing vibes and great people\n* Recap and summarize major takeaways","src/data/posts/2024-04-29-fedc-recap.md","c8baf6e5c87d18d6",{"html":210,"metadata":211},"\u003Cul>\n\u003Cli>Went to Front End Design Conference\u003C/li>\n\u003Cli>Experienced amazing vibes and great people\u003C/li>\n\u003Cli>Recap and summarize major takeaways\u003C/li>\n\u003C/ul>",{"headings":212,"imagePaths":213,"frontmatter":201},[],[],"2024-04-21-copy-work",{"id":214,"data":216,"body":221,"filePath":222,"digest":223,"rendered":224},{"title":217,"pubDate":218,"updatedDate":219,"description":220,"rssOnly":15,"draft":15},"Copy other people's copywork",["Date","2024-04-22T03:32:35.000Z"],["Date","2024-04-22T14:08:21.000Z"],"Copying work will get you to unique work.","After I updated my post about [replacing ESLint with Biome](https://charlesvillard.co/blog/2024-04-07-a-new-developer-biome-get-it/), I asked in a Discord server how to set up my [RSS feed ](https://charlesvillard.co/rss.xml)to share that a post was updated. [Cassidy](https://www.cassidoo.co) pointed me in the right direction and shared with me her entire approach. She sent me links to everything including query schemas, conditional logic, her XML setup, everything to help me get an “updated” property on my RSS feed. I let her know I was grateful. \"This is really cool, thank you! I'm stealing this during lunch.\"\n\nTo write that phrase, to say I'm going to steal someone else's idea, openly, might have scared me early in my career. I think it scares most people today, especially beginners.\n\nA lot of conversation has come up about retaking the web and building things for fun as of late. [Salma Alma-Naylor](https://twitter.com/whitep4nth3r/status/1772589938518712676) has talked about it. Jason Lengstorf basically [lives it](https://www.youtube.com/playlist?list=PLz8Iz-Fnk_eRDgZbo9vOKdSMeDfbDMlJu) [every day](https://www.youtube.com/playlist?list=PLz8Iz-Fnk_eRtJeLjx9CxPQw6MzbDgaEu). This discourse became personally ironic to me when I started looking up old Frontend Design Conference content, of which I'll be attending the 2024 edition this week, and saw that Adam Kuhn spoke at the last one about [the same thing](https://frontenddesignconference.com/2019/schedule/#:~:text=The%20Inherent%20Value%20of%20Building%20Useless%20Shit).\n\nThey're right. Web developers should build all kinds of useless fun things and make the Internet our own. Not just SaaS clones of eCommerce stores, but fun, impractical websites and applications. These projects are how web developers learn the basics and more advanced parts of our digital practice.\n\nHowever, I think there's something we also need to add to that discussion, or at least say it out loud once again, because the algorithms that currently govern the Internet might not. We do ourselves, and especially those entering the space, a service by giving us and them permission to build whatever they want. That comes with a disservice, however, if we don't address it. We as a community can give all the permission in the world to build, but we also need to give permission to steal.\n\n## Overwhelm\n\nOne of the first things I wanted to build when I started learning web development was a website for myself. My first thought was, I better look up some inspiration and see what others have done. What do they post on their portfolios?\n\nOne Google search later and my early-career web developer brain was dumbfounded. The top results were basically listicles featuring [amazing](https://bruno-simon.com/), [unique](http://www.rleonardi.com/), [well-crafted](https://2019.wattenberger.com/) [portfolios](https://www.adhamdannaway.com/). Crawling through Twitter bios uncovered even more, chockfull of [insightful](https://www.sarasoueidan.com/) [blog posts](https://danmall.com/) about [their experiences](https://daverupert.com/) and [their work](https://chriscoyier.net/). [So](https://sarahdrasnerdesign.com/) [much](https://ethanmarcotte.com/) [inspiration](https://bradfrost.com/)! Whatever could I do with it all?!\n\nI  saved them all to a folder in the bookmarks and called it a day.\n\nIt was too much. All of these websites expressed things about these developers and engineers that I just didn't believe I had: personality, insight, experience, confidence, skill. There was no way I could build something comparable.\n\nEventually, I worked out a website based on a [Jekyll theme](https://github.com/poole/hyde) and made it my own. It featured a picture of myself, had some blog posts, and a page for my resume. that was about it. I tried to believe it was okay, and people were encouraging, but I knew what was out there and I had no idea how to get that good.\n\n## Copycat\n\nIt was by happenstance that I came across Dan Mall's blog post about [stealing your way to designs.](https://danmall.com/posts/stealing-your-way-to-original-designs/) In this piece, Dan's first step in the process is copywork, taking something already set in stone and making it again. This post was encouraging because, at the time, I had an inkling of a talk idea that I never gave and this made me feel like I was on the right track. The point of the talk was to give yourself permission to do the following:\n\n- Lie to yourself that you can build great things and work towards proving myself right\n- Cheat with tools and abstractions until you feel ready to learn what they provide and how they worked\n- Steal inspiration from those around you and see how you might build somthing.\n\nThe talk sounded good in my head. It was freeing to think I could give myself that permission, to crawl through and imitate other people's code and not worry about whether what I'm using it for was original or unique or innovative. Alas, in the same way that I never gave that talk, I never followed my own advice. I never worked that muscle and developed projects on the side. I never wrote about the niche technical details, or at least now I'm trying to and it's really, really hard.\n\n## We already have it\n\nThe funny thing about web development is that we already have the permission to \"steal,\" in a way. Our entire industry is built on the shoulders of open-source software development, the contributions of many developers before us who cribbed from each other and learned collectively. That history comes with its twists and turns, but the sum of it is that our community is built on borrowed code and ideas.\n\nWe're seeing history repeat itself as new frontend frameworks help websites go from servers, to statically generated, to single-page applications, to server-side rendered again. All the while, they're borrowing ideas, patterns, and constructs from one another. Heck, Fred Schott [admitted](https://youtu.be/bPTZmUR7z90?si=Dc4_OAL2nf_73qWs) to asking Ryan Carniato for ideas. This is the norm! So why shouldn't it be the norm to try and build your own version of a silly piano or taco builder?\n\nAs we try and retake the Internet and build cool things again, I simply want to help others get ahead of this analysis paralysis now. If you know someone who is staring at that blank canvas, who wants to build a new Geocities, or a Bridgerton Binge Tracker in preparation for season three, and they don't have a direction to start with, send them this with a message: it's okay to steal inspiration.\n\nI mean, don't be a jerk and copy someone else's work wholesale. It'd be pretty easy to spot if you did.\n\nBut steal ideas. Steal patterns. Steal snippets. Learn what the code does and why it works. This kind of copywork will only help you grow.\n\nOh, and Cassidy's response when I said I was stealing it? “You are very welcome!!”","src/data/posts/2024-04-21-copy-work.md","67d149a82a0cc50f",{"html":225,"metadata":226},"\u003Cp>After I updated my post about \u003Ca href=\"https://charlesvillard.co/blog/2024-04-07-a-new-developer-biome-get-it/\">replacing ESLint with Biome\u003C/a>, I asked in a Discord server how to set up my \u003Ca href=\"https://charlesvillard.co/rss.xml\">RSS feed \u003C/a>to share that a post was updated. \u003Ca href=\"https://www.cassidoo.co\">Cassidy\u003C/a> pointed me in the right direction and shared with me her entire approach. She sent me links to everything including query schemas, conditional logic, her XML setup, everything to help me get an “updated” property on my RSS feed. I let her know I was grateful. “This is really cool, thank you! I’m stealing this during lunch.”\u003C/p>\n\u003Cp>To write that phrase, to say I’m going to steal someone else’s idea, openly, might have scared me early in my career. I think it scares most people today, especially beginners.\u003C/p>\n\u003Cp>A lot of conversation has come up about retaking the web and building things for fun as of late. \u003Ca href=\"https://twitter.com/whitep4nth3r/status/1772589938518712676\">Salma Alma-Naylor\u003C/a> has talked about it. Jason Lengstorf basically \u003Ca href=\"https://www.youtube.com/playlist?list=PLz8Iz-Fnk_eRDgZbo9vOKdSMeDfbDMlJu\">lives it\u003C/a> \u003Ca href=\"https://www.youtube.com/playlist?list=PLz8Iz-Fnk_eRtJeLjx9CxPQw6MzbDgaEu\">every day\u003C/a>. This discourse became personally ironic to me when I started looking up old Frontend Design Conference content, of which I’ll be attending the 2024 edition this week, and saw that Adam Kuhn spoke at the last one about \u003Ca href=\"https://frontenddesignconference.com/2019/schedule/#:~:text=The%20Inherent%20Value%20of%20Building%20Useless%20Shit\">the same thing\u003C/a>.\u003C/p>\n\u003Cp>They’re right. Web developers should build all kinds of useless fun things and make the Internet our own. Not just SaaS clones of eCommerce stores, but fun, impractical websites and applications. These projects are how web developers learn the basics and more advanced parts of our digital practice.\u003C/p>\n\u003Cp>However, I think there’s something we also need to add to that discussion, or at least say it out loud once again, because the algorithms that currently govern the Internet might not. We do ourselves, and especially those entering the space, a service by giving us and them permission to build whatever they want. That comes with a disservice, however, if we don’t address it. We as a community can give all the permission in the world to build, but we also need to give permission to steal.\u003C/p>\n\u003Ch2 id=\"overwhelm\">Overwhelm\u003C/h2>\n\u003Cp>One of the first things I wanted to build when I started learning web development was a website for myself. My first thought was, I better look up some inspiration and see what others have done. What do they post on their portfolios?\u003C/p>\n\u003Cp>One Google search later and my early-career web developer brain was dumbfounded. The top results were basically listicles featuring \u003Ca href=\"https://bruno-simon.com/\">amazing\u003C/a>, \u003Ca href=\"http://www.rleonardi.com/\">unique\u003C/a>, \u003Ca href=\"https://2019.wattenberger.com/\">well-crafted\u003C/a> \u003Ca href=\"https://www.adhamdannaway.com/\">portfolios\u003C/a>. Crawling through Twitter bios uncovered even more, chockfull of \u003Ca href=\"https://www.sarasoueidan.com/\">insightful\u003C/a> \u003Ca href=\"https://danmall.com/\">blog posts\u003C/a> about \u003Ca href=\"https://daverupert.com/\">their experiences\u003C/a> and \u003Ca href=\"https://chriscoyier.net/\">their work\u003C/a>. \u003Ca href=\"https://sarahdrasnerdesign.com/\">So\u003C/a> \u003Ca href=\"https://ethanmarcotte.com/\">much\u003C/a> \u003Ca href=\"https://bradfrost.com/\">inspiration\u003C/a>! Whatever could I do with it all?!\u003C/p>\n\u003Cp>I  saved them all to a folder in the bookmarks and called it a day.\u003C/p>\n\u003Cp>It was too much. All of these websites expressed things about these developers and engineers that I just didn’t believe I had: personality, insight, experience, confidence, skill. There was no way I could build something comparable.\u003C/p>\n\u003Cp>Eventually, I worked out a website based on a \u003Ca href=\"https://github.com/poole/hyde\">Jekyll theme\u003C/a> and made it my own. It featured a picture of myself, had some blog posts, and a page for my resume. that was about it. I tried to believe it was okay, and people were encouraging, but I knew what was out there and I had no idea how to get that good.\u003C/p>\n\u003Ch2 id=\"copycat\">Copycat\u003C/h2>\n\u003Cp>It was by happenstance that I came across Dan Mall’s blog post about \u003Ca href=\"https://danmall.com/posts/stealing-your-way-to-original-designs/\">stealing your way to designs.\u003C/a> In this piece, Dan’s first step in the process is copywork, taking something already set in stone and making it again. This post was encouraging because, at the time, I had an inkling of a talk idea that I never gave and this made me feel like I was on the right track. The point of the talk was to give yourself permission to do the following:\u003C/p>\n\u003Cul>\n\u003Cli>Lie to yourself that you can build great things and work towards proving myself right\u003C/li>\n\u003Cli>Cheat with tools and abstractions until you feel ready to learn what they provide and how they worked\u003C/li>\n\u003Cli>Steal inspiration from those around you and see how you might build somthing.\u003C/li>\n\u003C/ul>\n\u003Cp>The talk sounded good in my head. It was freeing to think I could give myself that permission, to crawl through and imitate other people’s code and not worry about whether what I’m using it for was original or unique or innovative. Alas, in the same way that I never gave that talk, I never followed my own advice. I never worked that muscle and developed projects on the side. I never wrote about the niche technical details, or at least now I’m trying to and it’s really, really hard.\u003C/p>\n\u003Ch2 id=\"we-already-have-it\">We already have it\u003C/h2>\n\u003Cp>The funny thing about web development is that we already have the permission to “steal,” in a way. Our entire industry is built on the shoulders of open-source software development, the contributions of many developers before us who cribbed from each other and learned collectively. That history comes with its twists and turns, but the sum of it is that our community is built on borrowed code and ideas.\u003C/p>\n\u003Cp>We’re seeing history repeat itself as new frontend frameworks help websites go from servers, to statically generated, to single-page applications, to server-side rendered again. All the while, they’re borrowing ideas, patterns, and constructs from one another. Heck, Fred Schott \u003Ca href=\"https://youtu.be/bPTZmUR7z90?si=Dc4_OAL2nf_73qWs\">admitted\u003C/a> to asking Ryan Carniato for ideas. This is the norm! So why shouldn’t it be the norm to try and build your own version of a silly piano or taco builder?\u003C/p>\n\u003Cp>As we try and retake the Internet and build cool things again, I simply want to help others get ahead of this analysis paralysis now. If you know someone who is staring at that blank canvas, who wants to build a new Geocities, or a Bridgerton Binge Tracker in preparation for season three, and they don’t have a direction to start with, send them this with a message: it’s okay to steal inspiration.\u003C/p>\n\u003Cp>I mean, don’t be a jerk and copy someone else’s work wholesale. It’d be pretty easy to spot if you did.\u003C/p>\n\u003Cp>But steal ideas. Steal patterns. Steal snippets. Learn what the code does and why it works. This kind of copywork will only help you grow.\u003C/p>\n\u003Cp>Oh, and Cassidy’s response when I said I was stealing it? “You are very welcome!!”\u003C/p>",{"headings":227,"imagePaths":237,"frontmatter":216},[228,231,234],{"depth":24,"slug":229,"text":230},"overwhelm","Overwhelm",{"depth":24,"slug":232,"text":233},"copycat","Copycat",{"depth":24,"slug":235,"text":236},"we-already-have-it","We already have it",[],"2024-04-29-the-medium-doesnt-change-the-principle",{"id":238,"data":240,"body":245,"filePath":246,"digest":247,"rendered":248},{"title":241,"pubDate":242,"updatedDate":243,"description":244,"rssOnly":15,"draft":90},"The medium doesn't change the principle",["Date","2024-04-29T11:23:47.000Z"],["Date","2024-04-29T11:23:47.000Z"],"Whatever you're engineering, some principles just stay the same.","- Homer Gaines shared a track-in-progress with me\n- Hasn't published it yet, but track featured some notes on what to work on\n- I listened to it, gave feedback\n- Homer found it helpful: he knew about these issues, but was happy to have them validated\n- Said he had to be careful, the track would lose its wormth and become flat if he over-engineered it.\n- **REACH OUT TO HOMER FOR HIS OKAY TO WRITE ABOUT THIS**\n- **FIND OTHER EXAMPLES OUTSIDE OF SOFTWARE ABOUT ENGINEERING PRINCIPLES**","src/data/posts/2024-04-29-the-medium-doesnt-change-the-principle.md","4ad24395a4256347",{"html":249,"metadata":250},"\u003Cul>\n\u003Cli>Homer Gaines shared a track-in-progress with me\u003C/li>\n\u003Cli>Hasn’t published it yet, but track featured some notes on what to work on\u003C/li>\n\u003Cli>I listened to it, gave feedback\u003C/li>\n\u003Cli>Homer found it helpful: he knew about these issues, but was happy to have them validated\u003C/li>\n\u003Cli>Said he had to be careful, the track would lose its wormth and become flat if he over-engineered it.\u003C/li>\n\u003Cli>\u003Cstrong>REACH OUT TO HOMER FOR HIS OKAY TO WRITE ABOUT THIS\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>FIND OTHER EXAMPLES OUTSIDE OF SOFTWARE ABOUT ENGINEERING PRINCIPLES\u003C/strong>\u003C/li>\n\u003C/ul>",{"headings":251,"imagePaths":252,"frontmatter":240},[],[],"2024-04-29-astros-great-but-what-about-11ty",{"id":253,"data":255,"body":260,"filePath":261,"digest":262,"rendered":263},{"title":256,"pubDate":257,"updatedDate":258,"description":259,"rssOnly":15,"draft":90},"Astro's great, but what about 11ty?",["Date","2024-04-30T04:00:00.000Z"],["Date","2024-05-01T04:00:00.000Z"],"Astro has taken off like a rocket, but what about Eleventy?","* FEDC featured a fair amount of Astro\n* Intro Astro for those who don't know it\n* But Astro came along after Eleventy\n* Intro Eleventy for those who don't know it\n* Why does Astro seem to have dominated the conversation\n* What's happened to Eleventy? What's going on with it?\n* **CONSIDER**: Reach out to Zach for a statement?\n* Look into history of Astro and Eleventy\n* Point to the fact that they're not opposing tools, just solving different things\n*","src/data/posts/2024-04-29-astros-great-but-what-about-11ty.md","36605d1872422a5a",{"html":264,"metadata":265},"\u003Cul>\n\u003Cli>FEDC featured a fair amount of Astro\u003C/li>\n\u003Cli>Intro Astro for those who don’t know it\u003C/li>\n\u003Cli>But Astro came along after Eleventy\u003C/li>\n\u003Cli>Intro Eleventy for those who don’t know it\u003C/li>\n\u003Cli>Why does Astro seem to have dominated the conversation\u003C/li>\n\u003Cli>What’s happened to Eleventy? What’s going on with it?\u003C/li>\n\u003Cli>\u003Cstrong>CONSIDER\u003C/strong>: Reach out to Zach for a statement?\u003C/li>\n\u003Cli>Look into history of Astro and Eleventy\u003C/li>\n\u003Cli>Point to the fact that they’re not opposing tools, just solving different things\u003C/li>\n\u003Cli>\u003C/li>\n\u003C/ul>",{"headings":266,"imagePaths":267,"frontmatter":255},[],[],"curation",{"id":268,"data":270,"body":275,"filePath":276,"digest":277,"rendered":278},{"title":271,"pubDate":272,"updatedDate":273,"description":274,"rssOnly":15,"draft":15},"Curation",["Date","2024-08-27T04:00:00.000Z"],["Date","2024-08-27T04:00:00.000Z"],"Algorithms can produce things. Conversation and community, not so much.","Some of my favorite Internet finds are websites dedicated to telling their readers about a single subject. Curated and maintained by a single person or a community of folks in their spare time, they are rarely fancy. There aren't any complicated algorithmic suggestions, and there is no pressure to pay with your money or data. They might have a blog, update feed, or tools of some kind. All told, these websites are intentionally designed to stand as independent, growing, evergreen repositories of information about a single subject.\n\n![](\u003C/public/assets/media/Screenshot 2024-08-26 at 11.40.35 PM.png>)\n\nI loved websites like these, back when I was learning how to code, like Shay Howe's [Learn to Code HTML & CSS](https://learn.shayhowe.com/), and Jon Chan's [Bento](https://bento.io). Industry-specific websites that I've kept coming across over the years include Dee Bradley Baker's [\"I Want To Be A Voice Actor!\"](https://iwanttobeavoiceactor.com/) and Jason Thor Hall's [develop.games](https://www.develop.games/). I even developed one called [Miami Data](https://cdvillard.github.io/miami-data/) when I was learning about civic tech.\\\n\\\nOf course, there are more websites out there on all kinds of subjects. These were just the first I thought of when I saw Chad Stewart's recently launched [Job Search Resources](https://job-search-resources.techishiring.com/) site on TechIsHiring. Visitors to the site can check out resources across a few categories and submit their own. Chad's goal is to grow it over time and, hopefully, the community will help it grow into a central repository geared towards helping those on the job hunt.\n\nI think the coolest thing about Chad's Job Search Resources site is that it's not trying to be anything more than a resource to those who will benefit from it, contribute to it, and have conversations around it. It is an addition to another website, but it could stand on its own as a resource just as well. With algorithms driving what parts of the Internet I discover, and AI now generating what content it thinks will get the best spot in that algorithm, these kinds of websites are more dear to me than ever before.\n\nIt's a sentiment I hold for more than just websites, and one I'm not alone in holding. [Jeremy](https://adactio.com/journal/21241 \"Jeremy\") has [talked](https://adactio.com/journal/21278) about this before. [Cassidy](https://cassidoo.co/post/human-curation/) has [discussed](https://cassidoo.co/post/seattle-internet/) it as well. The Internet can, will, and probably should evolve, but it was supposed to be a resource for humans to connect through. The directions companies have taken the Internet through their practices and legislation have leveled up its capabilities but seemingly at the cost of curiosity and genuine organic interest. The Internet we know today doesn't offer the same sense of wonderment when surfing through new and unfamiliar parts as it once had.\n\nIt still can, though. We may just need to build it ourselves.","src/data/posts/Curation.md","0b6fca07d4d2fd75",{"html":279,"metadata":280},"\u003Cp>Some of my favorite Internet finds are websites dedicated to telling their readers about a single subject. Curated and maintained by a single person or a community of folks in their spare time, they are rarely fancy. There aren’t any complicated algorithmic suggestions, and there is no pressure to pay with your money or data. They might have a blog, update feed, or tools of some kind. All told, these websites are intentionally designed to stand as independent, growing, evergreen repositories of information about a single subject.\u003C/p>\n\u003Cp>\u003Cimg src=\"/public/assets/media/Screenshot 2024-08-26 at 11.40.35 PM.png\" alt=\"\">\u003C/p>\n\u003Cp>I loved websites like these, back when I was learning how to code, like Shay Howe’s \u003Ca href=\"https://learn.shayhowe.com/\">Learn to Code HTML &#x26; CSS\u003C/a>, and Jon Chan’s \u003Ca href=\"https://bento.io\">Bento\u003C/a>. Industry-specific websites that I’ve kept coming across over the years include Dee Bradley Baker’s \u003Ca href=\"https://iwanttobeavoiceactor.com/\">“I Want To Be A Voice Actor!”\u003C/a> and Jason Thor Hall’s \u003Ca href=\"https://www.develop.games/\">develop.games\u003C/a>. I even developed one called \u003Ca href=\"https://cdvillard.github.io/miami-data/\">Miami Data\u003C/a> when I was learning about civic tech.\u003Cbr>\n\u003Cbr>\nOf course, there are more websites out there on all kinds of subjects. These were just the first I thought of when I saw Chad Stewart’s recently launched \u003Ca href=\"https://job-search-resources.techishiring.com/\">Job Search Resources\u003C/a> site on TechIsHiring. Visitors to the site can check out resources across a few categories and submit their own. Chad’s goal is to grow it over time and, hopefully, the community will help it grow into a central repository geared towards helping those on the job hunt.\u003C/p>\n\u003Cp>I think the coolest thing about Chad’s Job Search Resources site is that it’s not trying to be anything more than a resource to those who will benefit from it, contribute to it, and have conversations around it. It is an addition to another website, but it could stand on its own as a resource just as well. With algorithms driving what parts of the Internet I discover, and AI now generating what content it thinks will get the best spot in that algorithm, these kinds of websites are more dear to me than ever before.\u003C/p>\n\u003Cp>It’s a sentiment I hold for more than just websites, and one I’m not alone in holding. \u003Ca href=\"https://adactio.com/journal/21241\" title=\"Jeremy\">Jeremy\u003C/a> has \u003Ca href=\"https://adactio.com/journal/21278\">talked\u003C/a> about this before. \u003Ca href=\"https://cassidoo.co/post/human-curation/\">Cassidy\u003C/a> has \u003Ca href=\"https://cassidoo.co/post/seattle-internet/\">discussed\u003C/a> it as well. The Internet can, will, and probably should evolve, but it was supposed to be a resource for humans to connect through. The directions companies have taken the Internet through their practices and legislation have leveled up its capabilities but seemingly at the cost of curiosity and genuine organic interest. The Internet we know today doesn’t offer the same sense of wonderment when surfing through new and unfamiliar parts as it once had.\u003C/p>\n\u003Cp>It still can, though. We may just need to build it ourselves.\u003C/p>",{"headings":281,"imagePaths":282,"frontmatter":270},[],[],"2024-06-06-an-argument-against-capabilities-focused-engineering",{"id":283,"data":285,"body":290,"filePath":291,"digest":292,"rendered":293},{"title":286,"pubDate":287,"updatedDate":288,"description":289,"rssOnly":15,"draft":90},"An argument against capabilities-focused engineering",["Date","2024-06-06T12:35:58.000Z"],["Date","2024-06-07T03:51:40.906Z"],"An open statement to companies who don't realize that 'good enough' is a weak excuse for bad practices.","Since becoming a software engineer, a common question I've received is, \"What are my greatest strengths and weaknesses?\" My typical answers revolve around hyperfocusing on details and problems that are not typically customer-facing. Superiors have called me out for obsessing over CSS, wanting to replace libraries, or wanting time to invest in rewriting parts of a project. I'm talked down from these ledges, just as often, with kind yet foreboding overtures like \"It's good enough,\" \"You can obsess over that once this epic has is closed,\" and similar statements.\n\nA former colleague pointed out an interesting phrase that encapsulates that kind of thinking: capabilities mindset, wherein an organization will take the time to build something that's \"just good enough.\" Once it's running, as long as it serves its purpose reliably, resources can focus on other efforts.\n\nThe definition of the term likely isn't accurate, at least not at first blush when you look it up online, but that is certainly a common sentiment I see in enterprise web development and even in some mid-sized practices. Once a service is up and running, so long as nothing is firing off any alarm bells, the common practice is to leave it alone and move on. Every six months, you might address some CVEs should they pop up, but you never update the core software, and you always leave old code commented out just in case you need it later.\n\nThe unfortunate side-effect I've witnessed over the years of this version of a capabilities mindset is that it often ignores the underpinnings of what customers see. Building for \"just good enough\" will surely get the feature/product/service off the ground, as long as customers experience a \"good enough\" user experience, but that code won't stand the test of time and scale if you leave it at that. What will more than likely occur is that a world of bad practices will evolve around that \"just good enough\" core set of code, typically by copying from the hacks and shortcuts taken to get it out the door on time. Furthermore, other \"just good enough\" services will begin to depend on each other. The pattern of shipping with a \"just good enough\" mentality will continue until you have not a robust set of web applications but a facade made up of code that's \"just good enough\" until someone finds a chink in the armor, requires a new feature that you didn't prepare for, or changes a mission-critical package.\n\nI don't mean to sound like I'm writing this from any higher-than-thou pedestal. I've cribbed patterns and been part of this problem in the past. I'm writing this because this kind of capabilities mindset, of always \"just good enough,\" discourages engineers at all levels from trying to build robust applications in the first place. Why should developers want to innovate if the services are \"just good enough\" for our customers, managers, and executives? Why should we push boundaries? Any organization that lists in its values a platitude related to \"pushing the industry forward\" should replace that with \"We build 'just good enough' software\" if they think they'll thrive on a \"capabilities mindset.\"","src/data/posts/2024-06-06-an-argument-against-capabilities-focused-engineering.md","8b325d110194f0de",{"html":294,"metadata":295},"\u003Cp>Since becoming a software engineer, a common question I’ve received is, “What are my greatest strengths and weaknesses?” My typical answers revolve around hyperfocusing on details and problems that are not typically customer-facing. Superiors have called me out for obsessing over CSS, wanting to replace libraries, or wanting time to invest in rewriting parts of a project. I’m talked down from these ledges, just as often, with kind yet foreboding overtures like “It’s good enough,” “You can obsess over that once this epic has is closed,” and similar statements.\u003C/p>\n\u003Cp>A former colleague pointed out an interesting phrase that encapsulates that kind of thinking: capabilities mindset, wherein an organization will take the time to build something that’s “just good enough.” Once it’s running, as long as it serves its purpose reliably, resources can focus on other efforts.\u003C/p>\n\u003Cp>The definition of the term likely isn’t accurate, at least not at first blush when you look it up online, but that is certainly a common sentiment I see in enterprise web development and even in some mid-sized practices. Once a service is up and running, so long as nothing is firing off any alarm bells, the common practice is to leave it alone and move on. Every six months, you might address some CVEs should they pop up, but you never update the core software, and you always leave old code commented out just in case you need it later.\u003C/p>\n\u003Cp>The unfortunate side-effect I’ve witnessed over the years of this version of a capabilities mindset is that it often ignores the underpinnings of what customers see. Building for “just good enough” will surely get the feature/product/service off the ground, as long as customers experience a “good enough” user experience, but that code won’t stand the test of time and scale if you leave it at that. What will more than likely occur is that a world of bad practices will evolve around that “just good enough” core set of code, typically by copying from the hacks and shortcuts taken to get it out the door on time. Furthermore, other “just good enough” services will begin to depend on each other. The pattern of shipping with a “just good enough” mentality will continue until you have not a robust set of web applications but a facade made up of code that’s “just good enough” until someone finds a chink in the armor, requires a new feature that you didn’t prepare for, or changes a mission-critical package.\u003C/p>\n\u003Cp>I don’t mean to sound like I’m writing this from any higher-than-thou pedestal. I’ve cribbed patterns and been part of this problem in the past. I’m writing this because this kind of capabilities mindset, of always “just good enough,” discourages engineers at all levels from trying to build robust applications in the first place. Why should developers want to innovate if the services are “just good enough” for our customers, managers, and executives? Why should we push boundaries? Any organization that lists in its values a platitude related to “pushing the industry forward” should replace that with “We build ‘just good enough’ software” if they think they’ll thrive on a “capabilities mindset.”\u003C/p>",{"headings":296,"imagePaths":297,"frontmatter":285},[],[],"by-the-46th-episode",{"id":298,"data":300,"body":305,"filePath":306,"digest":307,"rendered":308},{"title":301,"pubDate":302,"updatedDate":303,"description":304,"rssOnly":15,"draft":15},"By the 46th episode",["Date","2024-08-26T04:00:00.000Z"],["Date","2024-08-26T04:00:00.000Z"],"Trying to build something more than a career outside of my job","I didn't get to see it in theaters, but the family and I finally got to stream the newest [Ghostbusters](https://en.wikipedia.org/wiki/Ghostbusters_\\(franchise\\)) movies last weekend. I've been a fan of the franchise since catching reruns of The Real Ghostbusters when I was a kid. I still enjoy the early movies, The Extreme Ghostbusters reboot series, and I even liked the 2016 take on the movie, whatever the critics said.\n\nThere was a bit in *Ghostbusters: Afterlife* that really stuck with me. A supporting character going by the name of Podcast mentions he hosts a conspiracy-theory sci-fi podcast (get it?) that doesn't get a bunch of listeners, but \"really finds its voice in Episode 46.\" It's paid off later much to Podcast's delight, which is how I'd like to imagine I'd react if someone knew me from my work. \\\n\\\nFunny enough, people have told me they've seen my work, namely my blog posts. It's happened a couple of times, much to my surprise. However, instead of delight, the feeling I got was pure apprehension. What did they think of it? Was it too short? Did it actually convey anything useful? Did I sound like someone else? Did my Anthony Bourdain fanboy rear its ugly head again? No, what did they *really* think of it? What about in this particular paradigm, angle, and context, how about now? Okay, for real though, why didn't they saying it was actually bad?\n\nIt's this nerve and anxiety that's held me back from drafting a lot of my ideas, let alone posting or publishing them. Fun fact, I've even chickened out of a small book deal because of this kind of self-talk. I could be swimming in likely tens of dollars from my split as the author of the definitive manual about Vue 3 and the composition API! Tens of dollars!\n\nIn all seriousness, this kind of doubt is also what keeps me from pursuing other endeavors. I've plied my trade as a web developer and software engineer for more than eight years now, but mainly full-time for companies. That contrasts wildly from the people in this industry I really admire, those that follow the Indie Hacker ethos, that build for themselves and make a living through their passions, that stream all day while building a business and brand that lets them live on their terms. Sure, I've got guaranteed health insurance and RSUs, but if my employer goes under or lays me off, being able to build like these people could save my family's bacon and bank accounts. \n\nSo, eight years in, I'm deciding now is as good a time as any to start figuring it out. I'm still working a 9-to-5, but I'm at least  going to start working towards a business, a brand, something I can call my own. Hence why I applied to get into [DiscoLink Club](https://www.discolink.com/club). Their Discord server is full of hackers, entrepreneurs, creators, and builders either trying to improve the outcome of their businesses, or trying to get started building their own.\n\nI've only been a part of it for a few days, and I can tell [Saron Yitbarek](https://twitter.com/saronyitbarek) has built something really special here. I've had the pleasure of learning about [content creation from Scott Hanselman](https://twitter.com/DiscoLinkClub/status/1827707022776934539), got some great advice and coaching from [Ryan Cox](https://coxcoaching.co/), and I'm getting a lot of encouragement from people who have been in the same place I am now. In fact, another member of the DiscoLink Club, [Jono Yeong](https://jonathanyeong.com/), suggested I try a 30-day posting challenge to get over this nervousness about how \"worthy\" my writing is. That's why you're seeing this post today.\n\nWhat I'll be writing about over the next 30 days, 30 posts, or however long is going to be a bit up in the air. It will likely involve some JavaScript, some thoughts on the tech industry, maybe even a bit about cooking, who knows? I'm just hoping that by the end, I can be a little bit more like Podcast, build some neat things that I can turn into something neater, and find my voice some time in between.","src/data/posts/By-the-46th-episode.md","e5b3e65589fc5061",{"html":309,"metadata":310},"\u003Cp>I didn’t get to see it in theaters, but the family and I finally got to stream the newest \u003Ca href=\"https://en.wikipedia.org/wiki/Ghostbusters_(franchise)\">Ghostbusters\u003C/a> movies last weekend. I’ve been a fan of the franchise since catching reruns of The Real Ghostbusters when I was a kid. I still enjoy the early movies, The Extreme Ghostbusters reboot series, and I even liked the 2016 take on the movie, whatever the critics said.\u003C/p>\n\u003Cp>There was a bit in \u003Cem>Ghostbusters: Afterlife\u003C/em> that really stuck with me. A supporting character going by the name of Podcast mentions he hosts a conspiracy-theory sci-fi podcast (get it?) that doesn’t get a bunch of listeners, but “really finds its voice in Episode 46.” It’s paid off later much to Podcast’s delight, which is how I’d like to imagine I’d react if someone knew me from my work. \u003Cbr>\n\u003Cbr>\nFunny enough, people have told me they’ve seen my work, namely my blog posts. It’s happened a couple of times, much to my surprise. However, instead of delight, the feeling I got was pure apprehension. What did they think of it? Was it too short? Did it actually convey anything useful? Did I sound like someone else? Did my Anthony Bourdain fanboy rear its ugly head again? No, what did they \u003Cem>really\u003C/em> think of it? What about in this particular paradigm, angle, and context, how about now? Okay, for real though, why didn’t they saying it was actually bad?\u003C/p>\n\u003Cp>It’s this nerve and anxiety that’s held me back from drafting a lot of my ideas, let alone posting or publishing them. Fun fact, I’ve even chickened out of a small book deal because of this kind of self-talk. I could be swimming in likely tens of dollars from my split as the author of the definitive manual about Vue 3 and the composition API! Tens of dollars!\u003C/p>\n\u003Cp>In all seriousness, this kind of doubt is also what keeps me from pursuing other endeavors. I’ve plied my trade as a web developer and software engineer for more than eight years now, but mainly full-time for companies. That contrasts wildly from the people in this industry I really admire, those that follow the Indie Hacker ethos, that build for themselves and make a living through their passions, that stream all day while building a business and brand that lets them live on their terms. Sure, I’ve got guaranteed health insurance and RSUs, but if my employer goes under or lays me off, being able to build like these people could save my family’s bacon and bank accounts.\u003C/p>\n\u003Cp>So, eight years in, I’m deciding now is as good a time as any to start figuring it out. I’m still working a 9-to-5, but I’m at least  going to start working towards a business, a brand, something I can call my own. Hence why I applied to get into \u003Ca href=\"https://www.discolink.com/club\">DiscoLink Club\u003C/a>. Their Discord server is full of hackers, entrepreneurs, creators, and builders either trying to improve the outcome of their businesses, or trying to get started building their own.\u003C/p>\n\u003Cp>I’ve only been a part of it for a few days, and I can tell \u003Ca href=\"https://twitter.com/saronyitbarek\">Saron Yitbarek\u003C/a> has built something really special here. I’ve had the pleasure of learning about \u003Ca href=\"https://twitter.com/DiscoLinkClub/status/1827707022776934539\">content creation from Scott Hanselman\u003C/a>, got some great advice and coaching from \u003Ca href=\"https://coxcoaching.co/\">Ryan Cox\u003C/a>, and I’m getting a lot of encouragement from people who have been in the same place I am now. In fact, another member of the DiscoLink Club, \u003Ca href=\"https://jonathanyeong.com/\">Jono Yeong\u003C/a>, suggested I try a 30-day posting challenge to get over this nervousness about how “worthy” my writing is. That’s why you’re seeing this post today.\u003C/p>\n\u003Cp>What I’ll be writing about over the next 30 days, 30 posts, or however long is going to be a bit up in the air. It will likely involve some JavaScript, some thoughts on the tech industry, maybe even a bit about cooking, who knows? I’m just hoping that by the end, I can be a little bit more like Podcast, build some neat things that I can turn into something neater, and find my voice some time in between.\u003C/p>",{"headings":311,"imagePaths":312,"frontmatter":300},[],[],"giving-grace",{"id":313,"data":315,"body":320,"filePath":321,"digest":322,"rendered":323},{"title":316,"pubDate":317,"updatedDate":318,"description":319,"rssOnly":15,"draft":15},"Giving yourself grace",["Date","2024-08-28T00:00:00.000Z"],["Date","2024-08-29T03:55:18.401Z"],"Sometimes, rest is sweeter.","I have a confession to make: despite having kept up with my commitment publishing to my blog every day for what's now three days in a row, I am only human. While I was drafting my post about [human curation](https://charlesvillard.co/blog/curation/), I was truly and utterly exhausted from the culmination of a busy work day and a severe case of [revenge bedtime procrastination](https://www.verywellmind.com/what-is-revenge-bedtime-procrastination-5189591). I was trying to drum up my thoughts while also calling into a late-night push-to-production meeting with about 100 of my closest co-workers, just in case something needed a last-minute bug fix.\n\nBetween the fact-checking and fits of micro-sleeping, I had already lost my progress, twice, to sleepily drifting fingers accidentally closing or refreshing the browser window I was editing the post in. That sure well teaches me to not write drafts in an online editor. For the curious and opinionated, [Obsidian](https://obsidian.md/) is my go-to tool as I'm writing this.\n\nAfter losing my introduction a second time, I had to laugh at myself and find some folks to laugh with me. Sharing my experience on my Discord server of choice netted me what was an appropriate response.![](\u003C/public/assets/media/Screenshot 2024-08-27 at 9.56.26 PM.png>)\n\nFair enough, but I was really excited to expand on the intersection between curated subject matter websites, the need for human connection, and a lack of community and conversation for web developers ever since Twitter changed. This was going to be a truly insightful post! I had to get it down and published for the masses to read so I could change the minds of powerful people at a fundamental level!\n\nThen I looked at the clock. It was 1:00 am. I had to get up the next morning to get the kids' school lunches ready and hop on a networking call. As they say, time is undefeated.\n\nSo, I'll be giving myself some grace, especially when I want to write but rest is required. That post about community and conversation is still forthcoming, but it will have to wait for a more rested version of myself to write it. At the very least, a tomorrow version. Right now, I'm going to bed.","src/data/posts/Giving-grace.md","0215f96ed6675354",{"html":324,"metadata":325},"\u003Cp>I have a confession to make: despite having kept up with my commitment publishing to my blog every day for what’s now three days in a row, I am only human. While I was drafting my post about \u003Ca href=\"https://charlesvillard.co/blog/curation/\">human curation\u003C/a>, I was truly and utterly exhausted from the culmination of a busy work day and a severe case of \u003Ca href=\"https://www.verywellmind.com/what-is-revenge-bedtime-procrastination-5189591\">revenge bedtime procrastination\u003C/a>. I was trying to drum up my thoughts while also calling into a late-night push-to-production meeting with about 100 of my closest co-workers, just in case something needed a last-minute bug fix.\u003C/p>\n\u003Cp>Between the fact-checking and fits of micro-sleeping, I had already lost my progress, twice, to sleepily drifting fingers accidentally closing or refreshing the browser window I was editing the post in. That sure well teaches me to not write drafts in an online editor. For the curious and opinionated, \u003Ca href=\"https://obsidian.md/\">Obsidian\u003C/a> is my go-to tool as I’m writing this.\u003C/p>\n\u003Cp>After losing my introduction a second time, I had to laugh at myself and find some folks to laugh with me. Sharing my experience on my Discord server of choice netted me what was an appropriate response.\u003Cimg src=\"/public/assets/media/Screenshot 2024-08-27 at 9.56.26 PM.png\" alt=\"\">\u003C/p>\n\u003Cp>Fair enough, but I was really excited to expand on the intersection between curated subject matter websites, the need for human connection, and a lack of community and conversation for web developers ever since Twitter changed. This was going to be a truly insightful post! I had to get it down and published for the masses to read so I could change the minds of powerful people at a fundamental level!\u003C/p>\n\u003Cp>Then I looked at the clock. It was 1:00 am. I had to get up the next morning to get the kids’ school lunches ready and hop on a networking call. As they say, time is undefeated.\u003C/p>\n\u003Cp>So, I’ll be giving myself some grace, especially when I want to write but rest is required. That post about community and conversation is still forthcoming, but it will have to wait for a more rested version of myself to write it. At the very least, a tomorrow version. Right now, I’m going to bed.\u003C/p>",{"headings":326,"imagePaths":327,"frontmatter":315},[],[],"apply-to-jobs-with-feeling",{"id":328,"data":330,"body":335,"filePath":336,"digest":337,"rendered":338},{"title":331,"pubDate":332,"updatedDate":333,"description":334,"rssOnly":15,"draft":90},"How to apply to jobs, with feeling this time",["Date","2024-07-08T04:00:00.000Z"],["Date","2024-07-08T04:00:00.000Z"],"The tech job market hasn't improved in 2024. That doesn't mean how we apply to jobs has to worsen.","The song-and-dance routine that is \"finding a job in tech\" seems more difficult than ever in 2024. I know many people with extensive technical backgrounds who can't land interviews, let alone get hired. The reasons for that are potentially myriad. Gluts of talent due to layoffs, a lack of investment in specific areas of development, and shifts toward using AI to filter candidates despite potential programmatic biases have been in headlines for the state of the tech job market in some capacity. While they may be factors, we as an industry need to consider another possibility. Maybe those of us technologists looking for jobs are getting in our own way as well, and I want to call out the issue with my whole chest:\n\n**If you're applying for a job, you need to do it with feeling.** You must put in the effort; you must actually try.\n\nBecause when you don't, the state of the industry isn't why you're not finding work. The reason becomes you.\n\n## Two left feet\n\nSpeaking with a friend who recently helped sort applications for a technical role at an early-stage startup, I asked how the review went. My friend pulled out some numbers and, given the process and methodologies they used, let's say the results were not encouraging. If these were not anecdotal and represented any signifier of how technologists apply to jobs across the industry today, it would make it harder to cheer for job-seekers.\n\nThe goal for this particular review was to select candidates for the first round of interview calls. Candidates' application packages were reviewed by a human being with no use of AI and sorted into three categories:\n\n* \"Consider Interviewing,\" which is pretty self-explanatory\n* \"Pass\" represented those who completed the application in full and were qualified based on technical expertise but were passed on based on their answers to questions on the application form.\n* \"Disqualified,\" as in passed on from the outset due to basic errors such as providing only a first name or a broken portfolio link.\n\nOut of approximately 400 candidates, **85% were immediately \"disqualified.\"** Less than 5% of qualified candidates were eligible for interviews.\n\nWhat's more, those disqualified were for easy wins that they let lapse into unprofessional mistakes. Questions were left minimally answered, resumes submitted listed nothing related to the role, personal information was left incomplete, broken LinkedIn URLs -- it's LinkedIn, how do you have a broken profile link?!\n\n## The steps haven't changed.\n\nThe cadence for finding a job in tech has barely changed since I started looking for my first full-time role in 2016, and neither has the general advice. It's an imperfect system, and all the gripes people tend to have with today's processes are valid, but it boggles my mind to think that many applicants find the trickiest step in this waltz to be filling out the application.\n\nIn a way, I understand it. I've filed my fair share of applications with just a resume and some identifying information, but only because that's what it asked for. If I found a role I wanted that required some questions answered, I at least set those aside to work on my answers truthfully and thoroughly.\\\n\\\nWhat amazed me most was the sense of apathy towards filling out an application when I heard those numbers. To hear that more than 340 people who filled out the application, supposedly looking for meaningful employment, were either too tired or didn't care enough to fill out the application was disheartening. But in the face of the current hiring rates in the tech industry, that apathy makes the popular discourse around bashing companies for using AI to select candidates look very weak.\n\n## Practice your footwork\n\nOne constant gripe I've seen over my years of applying to jobs is that job applications always seem inconvenient. We got mad when we had to list each job in the application and our resume. We didn't want to include extra details like languages or answer culture-fit questions. Some of these complaints have been valid, and I'm glad we don't need to deal with them anymore! But it will always take some effort to fill out job applications, and it will take some more to fill out a convincing one. To that end, I want to share some pointers that have helped me.","src/data/posts/apply-to-jobs-with-feeling.md","8b77c6561477bc96",{"html":339,"metadata":340},"\u003Cp>The song-and-dance routine that is “finding a job in tech” seems more difficult than ever in 2024. I know many people with extensive technical backgrounds who can’t land interviews, let alone get hired. The reasons for that are potentially myriad. Gluts of talent due to layoffs, a lack of investment in specific areas of development, and shifts toward using AI to filter candidates despite potential programmatic biases have been in headlines for the state of the tech job market in some capacity. While they may be factors, we as an industry need to consider another possibility. Maybe those of us technologists looking for jobs are getting in our own way as well, and I want to call out the issue with my whole chest:\u003C/p>\n\u003Cp>\u003Cstrong>If you’re applying for a job, you need to do it with feeling.\u003C/strong> You must put in the effort; you must actually try.\u003C/p>\n\u003Cp>Because when you don’t, the state of the industry isn’t why you’re not finding work. The reason becomes you.\u003C/p>\n\u003Ch2 id=\"two-left-feet\">Two left feet\u003C/h2>\n\u003Cp>Speaking with a friend who recently helped sort applications for a technical role at an early-stage startup, I asked how the review went. My friend pulled out some numbers and, given the process and methodologies they used, let’s say the results were not encouraging. If these were not anecdotal and represented any signifier of how technologists apply to jobs across the industry today, it would make it harder to cheer for job-seekers.\u003C/p>\n\u003Cp>The goal for this particular review was to select candidates for the first round of interview calls. Candidates’ application packages were reviewed by a human being with no use of AI and sorted into three categories:\u003C/p>\n\u003Cul>\n\u003Cli>“Consider Interviewing,” which is pretty self-explanatory\u003C/li>\n\u003Cli>“Pass” represented those who completed the application in full and were qualified based on technical expertise but were passed on based on their answers to questions on the application form.\u003C/li>\n\u003Cli>“Disqualified,” as in passed on from the outset due to basic errors such as providing only a first name or a broken portfolio link.\u003C/li>\n\u003C/ul>\n\u003Cp>Out of approximately 400 candidates, \u003Cstrong>85% were immediately “disqualified.”\u003C/strong> Less than 5% of qualified candidates were eligible for interviews.\u003C/p>\n\u003Cp>What’s more, those disqualified were for easy wins that they let lapse into unprofessional mistakes. Questions were left minimally answered, resumes submitted listed nothing related to the role, personal information was left incomplete, broken LinkedIn URLs — it’s LinkedIn, how do you have a broken profile link?!\u003C/p>\n\u003Ch2 id=\"the-steps-havent-changed\">The steps haven’t changed.\u003C/h2>\n\u003Cp>The cadence for finding a job in tech has barely changed since I started looking for my first full-time role in 2016, and neither has the general advice. It’s an imperfect system, and all the gripes people tend to have with today’s processes are valid, but it boggles my mind to think that many applicants find the trickiest step in this waltz to be filling out the application.\u003C/p>\n\u003Cp>In a way, I understand it. I’ve filed my fair share of applications with just a resume and some identifying information, but only because that’s what it asked for. If I found a role I wanted that required some questions answered, I at least set those aside to work on my answers truthfully and thoroughly.\u003Cbr>\n\u003Cbr>\nWhat amazed me most was the sense of apathy towards filling out an application when I heard those numbers. To hear that more than 340 people who filled out the application, supposedly looking for meaningful employment, were either too tired or didn’t care enough to fill out the application was disheartening. But in the face of the current hiring rates in the tech industry, that apathy makes the popular discourse around bashing companies for using AI to select candidates look very weak.\u003C/p>\n\u003Ch2 id=\"practice-your-footwork\">Practice your footwork\u003C/h2>\n\u003Cp>One constant gripe I’ve seen over my years of applying to jobs is that job applications always seem inconvenient. We got mad when we had to list each job in the application and our resume. We didn’t want to include extra details like languages or answer culture-fit questions. Some of these complaints have been valid, and I’m glad we don’t need to deal with them anymore! But it will always take some effort to fill out job applications, and it will take some more to fill out a convincing one. To that end, I want to share some pointers that have helped me.\u003C/p>",{"headings":341,"imagePaths":351,"frontmatter":330},[342,345,348],{"depth":24,"slug":343,"text":344},"two-left-feet","Two left feet",{"depth":24,"slug":346,"text":347},"the-steps-havent-changed","The steps haven’t changed.",{"depth":24,"slug":349,"text":350},"practice-your-footwork","Practice your footwork",[],"learn-your-tools",{"id":352,"data":354,"body":359,"filePath":360,"digest":361,"rendered":362},{"title":355,"pubDate":356,"updatedDate":357,"description":358,"rssOnly":15,"draft":15},"Learn your tools",["Date","2024-08-31T04:51:30.339Z"],["Date","2024-09-01T02:45:25.245Z"],"Your tools have more depth than you think.","A typical pattern most developers get caught in when learning the tools of their trade is learning the 20% of the available functionality that can get them through 80% of their work, which is perfectly understandable. I'm no different. Once we can get started on work, why dive too much deeper? The downside of that mindset is that we miss out on beneficial functionality that won't come up without some digging.\n\nThere's so much efficiency to unlock by digging a little deeper into the editors and libraries we use daily. Plus, it can be such a flex! During the technical interview for my first job, way before CoPilot was a thing, I made an entire class skeleton pop up in a Visual Studio C# project with a keyboard shortcut. The hiring manager did a double-take and paused the interview to make sure I wasn't copy-pasting code. You'd be surprised by who doesn't know this and, with that knowledge, how many people you could teach.\n\nA solid strategy to learn these features is to hunt them down while working on projects, especially when we wonder how to improve an awkward workflow. I did this while fixing an issue with my blog and thought I'd share two examples. Hopefully, you'll see some parallels with bits of awkwardness in your workflow and be encouraged to find ways to improve them.\n\n## The issue at hand\n\nThe homepage of my site features a blog list sorted by a simple [Javascript sort](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) method before it renders the posts on the page. That code sorts the posts by newest first based on each post's `updatedDate` and `pubDate` properties. I use [Tina.io](https://tina.io/) for my CMS. When configuring the [content model](https://tina.io/docs/schema/) for a project, each \"collection\" of a particular class requires a field type for each property on that class. In this case, the `updatedDate` and `pubDate` properties of my post were of field type `datetime`, which returns a Date string in ISO string format.\n\nI would have liked to set a new Date for these values as a default for a new post but I couldn't find a reliable way to do so, likely due to a version mismatch between what I installed and what the docs described. So, to be sure I didn't publish a new post without these dates set, I made them required fields as a reminder to manually update them. It was far from ideal, but it suited my needs.\n\nI published [\"Curation\"](/blog/curation) pretty late on August 27th, followed by [\"Giving yourself grace\"](/blog/giving-grace) the night after. The code was pushed to GitHub and picked up by Netlify, which ran the build commands for Tina and Astro. All lights came back green, all good.\n\nAt least, it would have been, except that the post at the top of the blog list was still \"Curation.\" I found \"Giving yourself grace\" below the fold. Why?\n\nWell, when I had written those content models, the definition of the `updatedDate` and `pubDate` fields were pretty barebones, just setting the field name, a readable name, and the type of `datetime`.\n\n```typescript\nimport { defineConfig } from \"tinacms\";\n\nexport default defineConfig({\n  // ...\n  schema: {\n    collections: [\n      {\n        name: \"post\",\n        label: \"Posts\",\n        // ...\n        fields: [\n          {\n            type: \"datetime\",\n            name: \"pubDate\",\n            label: \"Publish Date\",\n            required: true,\n          },\n          {\n            type: \"datetime\",\n            name: \"updatedDate\",\n            label: \"Updated Date\",\n            required: true,\n          },\n          // ...\n        ],\n      },\n    ],\n  },\n});\n```\n\nThis lightweight definition defaults to an ISO date string with just the year, month, date, and a localized time value of midnight GMT. That meant both \"Curation\" and \"Giving yourself grace\" had `pubDate` values of `2024-08-27T04:00:00.000Z` and weren't sorted at all in the blog list, which was rendered out of order.\n\n## The solution\n\nThe solution to this seemed pretty straightforward: ensure the `datetime` values for the `pubDate` and `updatedDate` properties include the time whenever changes to a post are saved. This way, the values would always be unique enough for sorting unless manually edited. Finding the right approach was the tricky part, though. As I said before, setting a default of the immediate time and date when the user clicked on \"New Post\" would have saved me time, but that seemed like more installing and troubleshooting than I cared for at the time.\n\nLooking through my code, I couldn't spot a convenient fix. There had to be some way to address this in Tina's documentation. After a bit of digging around, I came across exactly what I needed in the form of the [Before Submit Function](https://tina.io/docs/extending-tina/before-submit/).\n\nThe Before Submit Function is a function property nested in the content model that lets you control aspects of the output when you hit \"Save\" in Tina's editor. It effectively acts as a lifecycle hook for your publishing workflow that lets you access the form, the Tina CMS instance, and the values you input to said form. The latter lets me access both properties and update their values with `new Date().toISOString()`. I also added a `timeFormat` property to both properties, which will let me edit them in the CMS should I need to in the future.\n\n```typescript\nimport { defineConfig, Form, TinaCMS } from \"tinacms\";\n\nexport default defineConfig({\n  // ...\n  schema: {\n    collections: [\n      {\n        name: \"post\",\n        label: \"Posts\",\n        path: \"src/content/posts\",\n        ui: {\n          filename: {\n            readonly: false,\n          },\n          beforeSubmit: async ({\n            form,\n            cms,\n            values,\n          }: {\n            form: Form\n            cms: TinaCMS\n            values: Record\u003Cstring, any>\n            }) => {\n            if (form.crudType === 'create') {\n              return {\n                ...values,\n                pubDate: new Date().toISOString(),\n              }\n            }\n\n            if (form.crudType === 'update') {\n              return {\n                ...values,\n                updatedDate: new Date().toISOString(),\n              }\n            }\n          },\n        },\n        fields: [\n          // ...\n          {\n            type: \"datetime\",\n            name: \"pubDate\",\n            label: \"Publish Date\",\n            description: \"This will be generated at first publish\",\n            ui: {\n              timeFormat: \"HH:mm\", // adding `timeFormat` will make sure I can edit the time in the CMS\n            }\n          },\n          {\n            type: \"datetime\",\n            name: \"updatedDate\",\n            label: \"Updated Date\",\n            description: \"This will be generated if it's already published on save.\",\n            ui: {\n              timeFormat: \"HH:mm\" // adding `timeFormat` will make sure I can edit the time in the CMS\n            }\n          },\n          // ...\n        ],\n      },\n    ],\n  },\n});\n```\n\nThat checked the boxes for both the automatic generation and ensuring I got the exact time of publication, meaning unique strings to sort by! As a bonus, I could update both based on the `crudType` property of the `form` value that gets passed into the `beforeSubmit` function. Something to note is that I had to remove the `required` property from both fields to allow the form to save successfully without validating their respective inputs.\n\n## First this, then that\n\nWhile fixing the sorting issue, I crossed paths with a familiar annoyance in [Visual Studio Code](https://code.visualstudio.com/). Some might say [Intellisense](https://code.visualstudio.com/docs/editor/intellisense) is an unsung hero of modern development, but I've always had a nitpick with it. While Intellisense can provide type-ahead suggestions, it falls a little short with things like TypeScript libraries. If I know what I'm typing, it can offer suggestions and will usually list what I'm looking for, but if I want to explore an object's properties, I have to play \"guess the letter.\"\n\n![](/assets/media/no-ctrl-space.gif)\n\nIt always bugged me because all the answers are in the type inference. I could do a lookup with \"Go to Type Definition,\" but now I'm pulling myself away from my code and going down another rabbit hole. So hey, since we're digging around documentation already, let's check out VS Code's docs to see if they- oh, [they did](https://code.visualstudio.com/docs/editor/intellisense#_intellisense-features:~:text=You%20can%20trigger%20IntelliSense%20in,\\(.\\)%20in%20JavaScript)! It turns out that hitting the keyboard shortcut `Ctrl+Space` will trigger Intellisense and show all the properties and methods available within the class your cursor is in. That can be a huge efficiency boost when your primary job is to find the methods and properties to make the magic squiggles on the screen keep squiggling.\n\n![](/assets/media/ctrl-space.gif)\n\n## So, what did we learn?\n\nHuzzah! Our sorting problem is solved, but the real treasure was the new tricks we learned along the way, right?\n\nYeah, kind of, but not quite. What I hope you take away from this aren't niche solutions but that you, as a developer, should learn your tools. Sometimes, it takes a bit of searching to find what you're looking for. Look at how far into the documentation I'd need to traverse to find information on the Before Submit Function if they didn't have a search bar! That would have taken time! And effort!\n\n![](/assets/media/tina-menu.png)\n\nThe thing is that time and effort are well worth spending now to be more productive later. The Copilots and chatbots of the world can help, but in that half-automated pair programming session, you're still the one driving. You need to know your ship.","src/data/posts/Learn-your-tools.md","747db01f06f02e63",{"html":363,"metadata":364},"\u003Cp>A typical pattern most developers get caught in when learning the tools of their trade is learning the 20% of the available functionality that can get them through 80% of their work, which is perfectly understandable. I’m no different. Once we can get started on work, why dive too much deeper? The downside of that mindset is that we miss out on beneficial functionality that won’t come up without some digging.\u003C/p>\n\u003Cp>There’s so much efficiency to unlock by digging a little deeper into the editors and libraries we use daily. Plus, it can be such a flex! During the technical interview for my first job, way before CoPilot was a thing, I made an entire class skeleton pop up in a Visual Studio C# project with a keyboard shortcut. The hiring manager did a double-take and paused the interview to make sure I wasn’t copy-pasting code. You’d be surprised by who doesn’t know this and, with that knowledge, how many people you could teach.\u003C/p>\n\u003Cp>A solid strategy to learn these features is to hunt them down while working on projects, especially when we wonder how to improve an awkward workflow. I did this while fixing an issue with my blog and thought I’d share two examples. Hopefully, you’ll see some parallels with bits of awkwardness in your workflow and be encouraged to find ways to improve them.\u003C/p>\n\u003Ch2 id=\"the-issue-at-hand\">The issue at hand\u003C/h2>\n\u003Cp>The homepage of my site features a blog list sorted by a simple \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\">Javascript sort\u003C/a> method before it renders the posts on the page. That code sorts the posts by newest first based on each post’s \u003Ccode>updatedDate\u003C/code> and \u003Ccode>pubDate\u003C/code> properties. I use \u003Ca href=\"https://tina.io/\">Tina.io\u003C/a> for my CMS. When configuring the \u003Ca href=\"https://tina.io/docs/schema/\">content model\u003C/a> for a project, each “collection” of a particular class requires a field type for each property on that class. In this case, the \u003Ccode>updatedDate\u003C/code> and \u003Ccode>pubDate\u003C/code> properties of my post were of field type \u003Ccode>datetime\u003C/code>, which returns a Date string in ISO string format.\u003C/p>\n\u003Cp>I would have liked to set a new Date for these values as a default for a new post but I couldn’t find a reliable way to do so, likely due to a version mismatch between what I installed and what the docs described. So, to be sure I didn’t publish a new post without these dates set, I made them required fields as a reminder to manually update them. It was far from ideal, but it suited my needs.\u003C/p>\n\u003Cp>I published \u003Ca href=\"/blog/curation\">“Curation”\u003C/a> pretty late on August 27th, followed by \u003Ca href=\"/blog/giving-grace\">“Giving yourself grace”\u003C/a> the night after. The code was pushed to GitHub and picked up by Netlify, which ran the build commands for Tina and Astro. All lights came back green, all good.\u003C/p>\n\u003Cp>At least, it would have been, except that the post at the top of the blog list was still “Curation.” I found “Giving yourself grace” below the fold. Why?\u003C/p>\n\u003Cp>Well, when I had written those content models, the definition of the \u003Ccode>updatedDate\u003C/code> and \u003Ccode>pubDate\u003C/code> fields were pretty barebones, just setting the field name, a readable name, and the type of \u003Ccode>datetime\u003C/code>.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { defineConfig } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"tinacms\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#B392F0\"> defineConfig\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  schema: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    collections: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"post\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        label: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Posts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">        // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        fields: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            type: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"datetime\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"pubDate\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            label: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Publish Date\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            required: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            type: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"datetime\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"updatedDate\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            label: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Updated Date\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            required: \u003C/span>\u003Cspan style=\"color:#79B8FF\">true\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">          // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This lightweight definition defaults to an ISO date string with just the year, month, date, and a localized time value of midnight GMT. That meant both “Curation” and “Giving yourself grace” had \u003Ccode>pubDate\u003C/code> values of \u003Ccode>2024-08-27T04:00:00.000Z\u003C/code> and weren’t sorted at all in the blog list, which was rendered out of order.\u003C/p>\n\u003Ch2 id=\"the-solution\">The solution\u003C/h2>\n\u003Cp>The solution to this seemed pretty straightforward: ensure the \u003Ccode>datetime\u003C/code> values for the \u003Ccode>pubDate\u003C/code> and \u003Ccode>updatedDate\u003C/code> properties include the time whenever changes to a post are saved. This way, the values would always be unique enough for sorting unless manually edited. Finding the right approach was the tricky part, though. As I said before, setting a default of the immediate time and date when the user clicked on “New Post” would have saved me time, but that seemed like more installing and troubleshooting than I cared for at the time.\u003C/p>\n\u003Cp>Looking through my code, I couldn’t spot a convenient fix. There had to be some way to address this in Tina’s documentation. After a bit of digging around, I came across exactly what I needed in the form of the \u003Ca href=\"https://tina.io/docs/extending-tina/before-submit/\">Before Submit Function\u003C/a>.\u003C/p>\n\u003Cp>The Before Submit Function is a function property nested in the content model that lets you control aspects of the output when you hit “Save” in Tina’s editor. It effectively acts as a lifecycle hook for your publishing workflow that lets you access the form, the Tina CMS instance, and the values you input to said form. The latter lets me access both properties and update their values with \u003Ccode>new Date().toISOString()\u003C/code>. I also added a \u003Ccode>timeFormat\u003C/code> property to both properties, which will let me edit them in the CMS should I need to in the future.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"typescript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> { defineConfig, Form, TinaCMS } \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> \"tinacms\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">export\u003C/span>\u003Cspan style=\"color:#F97583\"> default\u003C/span>\u003Cspan style=\"color:#B392F0\"> defineConfig\u003C/span>\u003Cspan style=\"color:#E1E4E8\">({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  schema: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    collections: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"post\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        label: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Posts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        path: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"src/content/posts\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ui: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          filename: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            readonly: \u003C/span>\u003Cspan style=\"color:#79B8FF\">false\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">          beforeSubmit\u003C/span>\u003Cspan style=\"color:#E1E4E8\">: \u003C/span>\u003Cspan style=\"color:#F97583\">async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> ({\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            form,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            cms,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            values,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          }\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            form\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Form\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            cms\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> TinaCMS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#FFAB70\">            values\u003C/span>\u003Cspan style=\"color:#F97583\">:\u003C/span>\u003Cspan style=\"color:#B392F0\"> Record\u003C/span>\u003Cspan style=\"color:#E1E4E8\">&#x3C;\u003C/span>\u003Cspan style=\"color:#79B8FF\">string\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#79B8FF\">any\u003C/span>\u003Cspan style=\"color:#E1E4E8\">>\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (form.crudType \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'create'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">              return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                ...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">values,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                pubDate: \u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">toISOString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">              }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">            if\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> (form.crudType \u003C/span>\u003Cspan style=\"color:#F97583\">===\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'update'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">              return\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">                ...\u003C/span>\u003Cspan style=\"color:#E1E4E8\">values,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">                updatedDate: \u003C/span>\u003Cspan style=\"color:#F97583\">new\u003C/span>\u003Cspan style=\"color:#B392F0\"> Date\u003C/span>\u003Cspan style=\"color:#E1E4E8\">().\u003C/span>\u003Cspan style=\"color:#B392F0\">toISOString\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(),\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">              }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        fields: [\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">          // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            type: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"datetime\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"pubDate\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            label: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Publish Date\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            description: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"This will be generated at first publish\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            ui: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">              timeFormat: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"HH:mm\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#6A737D\">// adding `timeFormat` will make sure I can edit the time in the CMS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            type: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"datetime\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            name: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"updatedDate\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            label: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"Updated Date\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            description: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"This will be generated if it's already published on save.\"\u003C/span>\u003Cspan style=\"color:#E1E4E8\">,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            ui: {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">              timeFormat: \u003C/span>\u003Cspan style=\"color:#9ECBFF\">\"HH:mm\"\u003C/span>\u003Cspan style=\"color:#6A737D\"> // adding `timeFormat` will make sure I can edit the time in the CMS\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">            }\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">          },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">          // ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">        ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">      },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">    ],\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  },\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">});\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>That checked the boxes for both the automatic generation and ensuring I got the exact time of publication, meaning unique strings to sort by! As a bonus, I could update both based on the \u003Ccode>crudType\u003C/code> property of the \u003Ccode>form\u003C/code> value that gets passed into the \u003Ccode>beforeSubmit\u003C/code> function. Something to note is that I had to remove the \u003Ccode>required\u003C/code> property from both fields to allow the form to save successfully without validating their respective inputs.\u003C/p>\n\u003Ch2 id=\"first-this-then-that\">First this, then that\u003C/h2>\n\u003Cp>While fixing the sorting issue, I crossed paths with a familiar annoyance in \u003Ca href=\"https://code.visualstudio.com/\">Visual Studio Code\u003C/a>. Some might say \u003Ca href=\"https://code.visualstudio.com/docs/editor/intellisense\">Intellisense\u003C/a> is an unsung hero of modern development, but I’ve always had a nitpick with it. While Intellisense can provide type-ahead suggestions, it falls a little short with things like TypeScript libraries. If I know what I’m typing, it can offer suggestions and will usually list what I’m looking for, but if I want to explore an object’s properties, I have to play “guess the letter.”\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/media/no-ctrl-space.gif\" alt=\"\">\u003C/p>\n\u003Cp>It always bugged me because all the answers are in the type inference. I could do a lookup with “Go to Type Definition,” but now I’m pulling myself away from my code and going down another rabbit hole. So hey, since we’re digging around documentation already, let’s check out VS Code’s docs to see if they- oh, \u003Ca href=\"https://code.visualstudio.com/docs/editor/intellisense#_intellisense-features:~:text=You%20can%20trigger%20IntelliSense%20in,(.)%20in%20JavaScript\">they did\u003C/a>! It turns out that hitting the keyboard shortcut \u003Ccode>Ctrl+Space\u003C/code> will trigger Intellisense and show all the properties and methods available within the class your cursor is in. That can be a huge efficiency boost when your primary job is to find the methods and properties to make the magic squiggles on the screen keep squiggling.\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/media/ctrl-space.gif\" alt=\"\">\u003C/p>\n\u003Ch2 id=\"so-what-did-we-learn\">So, what did we learn?\u003C/h2>\n\u003Cp>Huzzah! Our sorting problem is solved, but the real treasure was the new tricks we learned along the way, right?\u003C/p>\n\u003Cp>Yeah, kind of, but not quite. What I hope you take away from this aren’t niche solutions but that you, as a developer, should learn your tools. Sometimes, it takes a bit of searching to find what you’re looking for. Look at how far into the documentation I’d need to traverse to find information on the Before Submit Function if they didn’t have a search bar! That would have taken time! And effort!\u003C/p>\n\u003Cp>\u003Cimg src=\"/assets/media/tina-menu.png\" alt=\"\">\u003C/p>\n\u003Cp>The thing is that time and effort are well worth spending now to be more productive later. The Copilots and chatbots of the world can help, but in that half-automated pair programming session, you’re still the one driving. You need to know your ship.\u003C/p>",{"headings":365,"imagePaths":378,"frontmatter":354},[366,369,372,375],{"depth":24,"slug":367,"text":368},"the-issue-at-hand","The issue at hand",{"depth":24,"slug":370,"text":371},"the-solution","The solution",{"depth":24,"slug":373,"text":374},"first-this-then-that","First this, then that",{"depth":24,"slug":376,"text":377},"so-what-did-we-learn","So, what did we learn?",[],"theres-no-20-in-file-system-naming",{"id":379,"data":381,"body":386,"filePath":387,"digest":388,"rendered":389},{"title":382,"pubDate":383,"updatedDate":384,"description":385,"rssOnly":15,"draft":15},"There's no %20 in file-system naming!",["Date","2024-08-24T04:00:00.000Z"],["Date","2024-08-24T04:00:00.000Z"],"Ever wondered why programmers don't want space in their directory names?","Over the last few years of my career, I've focused on front-end web development. I work a lot within file systems, but the code I typically write doesn't manipulate files. So when I hit a weird bug while refreshing my Node basics, I was reminded of a question from when I was learning to code: why do programmers seem to avoid adding spaces to their directory names?\n\nDuring the \"FS module\" chapter of [Scott Moss' Introduction to Node v3](https://frontendmasters.com/courses/node-js-v3/) on Frontend Masters, Moss introduces his students to using the [fsPromises.readFile](https://nodejs.org/api/fs.html#fspromisesreadfilepath-options) method to asynchronously read the project's `package.json` file. The code is pretty straightforward:\n\n```javascript\n/** bring in the promise version of fs */\nimport fs from 'node:fs/promises';\n\n/** define readPackageJson */\nconst readPJson = async () => {\n  /** \n   * get the path to the package.json, but create a URL \n   * because Node no longer has __dirName \n   * */\n  const pJsonPath = new URL('package.json', import.meta.url).pathname;\n  /** log the output of package.json */\n  console.log(JSON.parse(await fs.readFile(pJsonPath, 'utf-8')));\n}\n/** run the code */\nreadPJson();\n```\n\nScott runs the code on his machine. The output is a JSON object in his terminal. I ran it on my machine, and my output was this error:\n\n```shell\n# truncated the pathnames for privacy and readability\nnode:internal/process/promises:289\n            triggerUncaughtException(err, true /* fromPromise */);\n            ^\n\n[Error: ENOENT: no such file or directory, open '/Users/.../Frontend%20Masters/intro-nodejs-v3/package.json'] {\n  errno: -2,\n  code: 'ENOENT',\n  syscall: 'open',\n  path: '/Users/.../Frontend%20Masters/intro-nodejs-v3/package.json'\n}\n\nNode.js v20.11.0\n```\n\nThis is odd, thought I. I've run all the other fs commands introduced so far, so why is this one failing? I did just upgrade my laptop's operating system. Sometimes, OS upgrades mean permissions changes. It wouldn't be the first time. Could it have something to do with that? Let me run a test script in the same file to see if it's some read permission issue.\n\n```javascript\n/** same promise-version of fs */\nimport fs from 'node:fs/promises';\n\n/** \n * this time, log all the files in the same directory\n * from which this command is run\n */\nconsole.log(await fs.readdir('./', (err, files) => {\n  console.log(files || err);\n}));\n```\n\nThe resulting output was an array of the filenames I expected to be in the directory I ran the code from. So it was unlikely a permissions problem. Now, I admit, I shortcut solving this bug using CoPilot, but keen-eyed readers might have caught the bug in my code already, especially if they noticed the detail in the title. Let's look at the path in the error one more time.\n\n```shell\n{\n  ...\n  path: '/Users/.../Frontend%20Masters/intro-nodejs-v3/package.json'\n}\n```\n\nThat `%20` in the pathname represents a UTF-8 encoded space character. If we look at another command-line tool that can read pathnames, `pwd`which returns the path of the directory the user is currently in, the output looks a little different.\n\n```powershell\n# truncated the pathname for privacy and readability\n$ pwd\n  /Users/.../Frontend Masters/intro-nodejs-v3\n```\n\nThat space makes all the difference. Renaming the `Frontend Masters` folder to something like `frontend-masters` fixed the issue.\\\n\\\nThe workaround for issues like this is decoding the pathname string. I could see this being common practice, used as a precaution to avoid the headache of dealing with pathnames, but I don't write enough backend code dealing with file systems to know for sure.\n\n```javascript\nimport fs from 'node:fs/promises';\n\nconst readPJson = async () => {\n  const pJsonPath = new URL('package.json', import.meta.url).pathname;\n  /** Yay, no need to worry about spaces with this line! */\n  const decodedPath = decodeURIComponent(pJsonPath);\n  console.log(JSON.parse(await fs.readFile(decodedPath, 'utf-8')));\n}\n\nreadPJson();\n```\n\n\\\nSo, yeah, big revelation: encoding and decoding special characters can make reading files finicky. It's no surprise developers deal with this kind of thing at work every day. Imagine working around these problems at the scale of large applications like word processors or digital asset management software. No wonder developers do whatever they can to avoid inconveniences like character decoding.","src/data/posts/Theres-no-20-in-file-system-naming.md","699985a0e25fe57b",{"html":390,"metadata":391},"\u003Cp>Over the last few years of my career, I’ve focused on front-end web development. I work a lot within file systems, but the code I typically write doesn’t manipulate files. So when I hit a weird bug while refreshing my Node basics, I was reminded of a question from when I was learning to code: why do programmers seem to avoid adding spaces to their directory names?\u003C/p>\n\u003Cp>During the “FS module” chapter of \u003Ca href=\"https://frontendmasters.com/courses/node-js-v3/\">Scott Moss’ Introduction to Node v3\u003C/a> on Frontend Masters, Moss introduces his students to using the \u003Ca href=\"https://nodejs.org/api/fs.html#fspromisesreadfilepath-options\">fsPromises.readFile\u003C/a> method to asynchronously read the project’s \u003Ccode>package.json\u003C/code> file. The code is pretty straightforward:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/** bring in the promise version of fs */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fs \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'node:fs/promises'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/** define readPackageJson */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> readPJson\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  /** \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">   * get the path to the package.json, but create a URL \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">   * because Node no longer has __dirName \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">   * */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> pJsonPath\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'package.json'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">meta\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.url).pathname;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  /** log the output of package.json */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fs.\u003C/span>\u003Cspan style=\"color:#B392F0\">readFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(pJsonPath, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'utf-8'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/** run the code */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">readPJson\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>Scott runs the code on his machine. The output is a JSON object in his terminal. I ran it on my machine, and my output was this error:\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># truncated the pathnames for privacy and readability\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">node:internal/process/promises:289\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            triggerUncaughtException(err,\u003C/span>\u003Cspan style=\"color:#79B8FF\"> true\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> /\u003C/span>\u003Cspan style=\"color:#79B8FF\">*\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> fromPromise\u003C/span>\u003Cspan style=\"color:#79B8FF\"> *\u003C/span>\u003Cspan style=\"color:#9ECBFF\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">            ^\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">[Error: ENOENT: no such file or directory, open \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'/Users/.../Frontend%20Masters/intro-nodejs-v3/package.json'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">] {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  errno:\u003C/span>\u003Cspan style=\"color:#79B8FF\"> -2,\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  code:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'ENOENT',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  syscall:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'open',\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  path:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '/Users/.../Frontend%20Masters/intro-nodejs-v3/package.json'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">Node.js\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> v20.11.0\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>This is odd, thought I. I’ve run all the other fs commands introduced so far, so why is this one failing? I did just upgrade my laptop’s operating system. Sometimes, OS upgrades mean permissions changes. It wouldn’t be the first time. Could it have something to do with that? Let me run a test script in the same file to see if it’s some read permission issue.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/** same promise-version of fs */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fs \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'node:fs/promises'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">/** \u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * this time, log all the files in the same directory\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> * from which this command is run\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"> */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fs.\u003C/span>\u003Cspan style=\"color:#B392F0\">readdir\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'./'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, (\u003C/span>\u003Cspan style=\"color:#FFAB70\">err\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#FFAB70\">files\u003C/span>\u003Cspan style=\"color:#E1E4E8\">) \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(files \u003C/span>\u003Cspan style=\"color:#F97583\">||\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> err);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>The resulting output was an array of the filenames I expected to be in the directory I ran the code from. So it was unlikely a permissions problem. Now, I admit, I shortcut solving this bug using CoPilot, but keen-eyed readers might have caught the bug in my code already, especially if they noticed the detail in the title. Let’s look at the path in the error one more time.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"shell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">{\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#79B8FF\">  ...\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">  path:\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> '/Users/.../Frontend%20Masters/intro-nodejs-v3/package.json'\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>That \u003Ccode>%20\u003C/code> in the pathname represents a UTF-8 encoded space character. If we look at another command-line tool that can read pathnames, \u003Ccode>pwd\u003C/code>which returns the path of the directory the user is currently in, the output looks a little different.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"powershell\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\"># truncated the pathname for privacy and readability\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">$ pwd\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  /\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Users\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">...\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">Frontend Masters\u003C/span>\u003Cspan style=\"color:#F97583\">/\u003C/span>\u003Cspan style=\"color:#E1E4E8\">intro\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">nodejs\u003C/span>\u003Cspan style=\"color:#F97583\">-\u003C/span>\u003Cspan style=\"color:#E1E4E8\">v3\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>That space makes all the difference. Renaming the \u003Ccode>Frontend Masters\u003C/code> folder to something like \u003Ccode>frontend-masters\u003C/code> fixed the issue.\u003Cbr>\n\u003Cbr>\nThe workaround for issues like this is decoding the pathname string. I could see this being common practice, used as a precaution to avoid the headache of dealing with pathnames, but I don’t write enough backend code dealing with file systems to know for sure.\u003C/p>\n\u003Cpre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"javascript\">\u003Ccode>\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fs \u003C/span>\u003Cspan style=\"color:#F97583\">from\u003C/span>\u003Cspan style=\"color:#9ECBFF\"> 'node:fs/promises'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">const\u003C/span>\u003Cspan style=\"color:#B392F0\"> readPJson\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> async\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> () \u003C/span>\u003Cspan style=\"color:#F97583\">=>\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> {\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> pJsonPath\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#F97583\"> new\u003C/span>\u003Cspan style=\"color:#B392F0\"> URL\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#9ECBFF\">'package.json'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">, \u003C/span>\u003Cspan style=\"color:#F97583\">import\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#79B8FF\">meta\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.url).pathname;\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#6A737D\">  /** Yay, no need to worry about spaces with this line! */\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#F97583\">  const\u003C/span>\u003Cspan style=\"color:#79B8FF\"> decodedPath\u003C/span>\u003Cspan style=\"color:#F97583\"> =\u003C/span>\u003Cspan style=\"color:#B392F0\"> decodeURIComponent\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(pJsonPath);\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">  console.\u003C/span>\u003Cspan style=\"color:#B392F0\">log\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#79B8FF\">JSON\u003C/span>\u003Cspan style=\"color:#E1E4E8\">.\u003C/span>\u003Cspan style=\"color:#B392F0\">parse\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(\u003C/span>\u003Cspan style=\"color:#F97583\">await\u003C/span>\u003Cspan style=\"color:#E1E4E8\"> fs.\u003C/span>\u003Cspan style=\"color:#B392F0\">readFile\u003C/span>\u003Cspan style=\"color:#E1E4E8\">(decodedPath, \u003C/span>\u003Cspan style=\"color:#9ECBFF\">'utf-8'\u003C/span>\u003Cspan style=\"color:#E1E4E8\">)));\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#E1E4E8\">}\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\n\u003Cspan class=\"line\">\u003Cspan style=\"color:#B392F0\">readPJson\u003C/span>\u003Cspan style=\"color:#E1E4E8\">();\u003C/span>\u003C/span>\n\u003Cspan class=\"line\">\u003C/span>\u003C/code>\u003C/pre>\n\u003Cp>\u003Cbr>\nSo, yeah, big revelation: encoding and decoding special characters can make reading files finicky. It’s no surprise developers deal with this kind of thing at work every day. Imagine working around these problems at the scale of large applications like word processors or digital asset management software. No wonder developers do whatever they can to avoid inconveniences like character decoding.\u003C/p>",{"headings":392,"imagePaths":393,"frontmatter":381},[],[]]